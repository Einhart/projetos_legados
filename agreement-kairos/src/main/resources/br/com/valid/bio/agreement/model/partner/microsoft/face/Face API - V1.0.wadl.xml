<?xml version="1.0" encoding="utf-8"?>
<application xmlns:xml="http://www.w3.org/XML/1998/namespace" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://wadl.dev.java.net/2009/02 http://www.w3.org/Submission/wadl/wadl.xsd" xmlns="http://wadl.dev.java.net/2009/02">
  <doc title="Face API - V1.0">This API is currently available in:

* West US - westus.api.cognitive.microsoft.com
* West US 2 - westus2.api.cognitive.microsoft.com
* East US - eastus.api.cognitive.microsoft.com
* East US 2 - eastus2.api.cognitive.microsoft.com
* West Central US - westcentralus.api.cognitive.microsoft.com
* South Central US - southcentralus.api.cognitive.microsoft.com
* West Europe - westeurope.api.cognitive.microsoft.com
* North Europe - northeurope.api.cognitive.microsoft.com
* Southeast Asia - southeastasia.api.cognitive.microsoft.com
* East Asia - eastasia.api.cognitive.microsoft.com
* Australia East - australiaeast.api.cognitive.microsoft.com
* Brazil South - brazilsouth.api.cognitive.microsoft.com</doc>
  <resources base="https://westus.api.cognitive.microsoft.com/face/v1.0">
    <resource path="/detect">
      <doc title="Face - Detect">Detect human faces in an image, return face rectangles, and optionally with faceIds, landmarks, and attributes.
&lt;ul&gt;
    &lt;li&gt;Optional parameters including faceId, landmarks, and attributes. Attributes include age, gender, headPose, smile, facialHair,
        glasses, emotion, hair, makeup, occlusion, accessories, blur, exposure and noise.&lt;/li&gt;
    &lt;li&gt;faceId will be used in
        &lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239"&gt;Face - Identify&lt;/a&gt;,
        &lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523a"&gt;Face - Verify&lt;/a&gt;, and
        &lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237"&gt;Face - Find Similar&lt;/a&gt;. It will expire 24 hours after the detection call.&lt;/li&gt;
    &lt;li&gt;JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 4MB.&lt;/li&gt;
    &lt;li&gt;Faces are detectable when its size is 36x36 to 4096x4096 pixels. If need to detect very small but clear faces, please
        try to enlarge the input image.&lt;/li&gt;
    &lt;li&gt;Up to 64 faces can be returned for an image. Faces are ranked by face rectangle size from large to small.&lt;/li&gt;
    &lt;li&gt;Face detector prefer frontal and near-frontal faces. There are cases that faces may not be detected, e.g. exceptionally
        large face angles (head-pose) or being occluded, or wrong image orientation.&lt;/li&gt;
    &lt;li&gt;Attributes (age, gender, headPose, smile, facialHair, glasses, emotion, hair, makeup, occlusion, accessories, blur, exposure
        and noise) may not be perfectly accurate. HeadPose's pitch value is a reserved field and will always return 0.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Http Method&lt;/h4&gt;
POST
</doc>
      <method name="POST">
        <request>
          <doc>&lt;article class="ed_api_param"&gt;
To detect in a URL (or binary data) specified image.
&lt;br/&gt;&lt;br/&gt; JSON fields in the request body: &lt;br /&gt;
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Fields&lt;/th&gt;&lt;th&gt;Type&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;url&lt;/td&gt;&lt;th&gt;String&lt;/th&gt;&lt;td&gt;URL of input image.&lt;/td&gt;&lt;/tr&gt;

&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <param name="returnFaceId" style="query" type="xs:boolean" default="true">
            <doc>Return faceIds of the detected faces or not. The default value is true.</doc>
            <option value="false" />
            <option value="true" />
          </param>
          <param name="returnFaceLandmarks" style="query" type="xs:boolean" default="false">
            <doc>Return face landmarks of the detected faces or not. The default value is false.</doc>
            <option value="false" />
            <option value="true" />
          </param>
          <param name="returnFaceAttributes" style="query" type="xs:string">
            <doc>Analyze and return the one or more specified face attributes in the comma-separated string like "returnFaceAttributes=age,gender". Supported face attributes include age, gender, headPose, smile, facialHair, glasses, emotion, hair, makeup, occlusion, accessories, blur, exposure and noise. Face attribute analysis has additional computational and time cost.</doc>
          </param>
          <representation mediaType="application/json">
            <doc>{
    "url": "http://example.com/1.jpg"
}</doc>
          </representation>
          <representation mediaType="application/octet-stream">
            <doc>[binary data]</doc>
          </representation>
        </request>
        <response status="200">
          <doc>A successful call returns an array of face entries ranked by face rectangle size in descending order. An empty response indicates
no faces detected. A face entry may contain the following values depending on input parameters:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Fields&lt;/th&gt;
            &lt;th&gt;Type&lt;/th&gt;
            &lt;th&gt;Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;faceId&lt;/td&gt;
            &lt;th&gt;String&lt;/th&gt;
            &lt;td&gt;Unique faceId of the detected face, created by detection API and it will expire 24 hours after the detection call.
                To return this, it requires "returnFaceId" parameter to be true.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;faceRectangle&lt;/td&gt;
            &lt;th&gt;Object&lt;/th&gt;
            &lt;td&gt;A rectangle area for the face location on image.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;faceLandmarks&lt;/td&gt;
            &lt;th&gt;Object&lt;/th&gt;
            &lt;td&gt;An array of 27-point face landmarks pointing to the important positions of face components. To return this, it
                requires "returnFaceLandmarks" parameter to be true.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;faceAttributes&lt;/td&gt;
            &lt;th&gt;Object&lt;/th&gt;
            &lt;td&gt; Face Attributes:
                &lt;ul&gt;
                    &lt;li&gt;age: an estimated "visual age" number in years. It is how old a person looks like rather than the actual biological age.&lt;/li&gt;
                    &lt;li&gt;gender: male or female.&lt;/li&gt;
                    &lt;li&gt;smile: smile intensity, a number between [0,1].&lt;/li&gt;
                    &lt;li&gt;facialHair: return lengths in three facial hair areas: moustache, beard and sideburns. The length is
                        a number between [0,1]. 0 for no facial hair in this area, 1 for long or very thick facial hairs
                        in this area.&lt;/li&gt;
                    &lt;li&gt;headPose: 3-D roll/yaw/pitch angles for face direction. Note, Pitch value is a reserved field and will
                        always return 0.&lt;/li&gt;
                    &lt;li&gt;glasses: glasses type. Values include 'NoGlasses', 'ReadingGlasses', 'Sunglasses', 'SwimmingGoggles'.&lt;/li&gt;
                    &lt;li&gt;emotion: emotion intensity, including neutral, anger, contempt, disgust, fear, happiness, sadness and
                        surprise.
                    &lt;/li&gt;
                    &lt;li&gt;hair: group of hair values indicating whether the hair is visible, bald, and hair color if hair is visible.&lt;/li&gt;
                    &lt;li&gt;makeup: whether eye, lip areas are made-up or not.&lt;/li&gt;
                    &lt;li&gt;accessories: accessories around face, including 'headwear', 'glasses' and 'mask'. Empty array means no
                        accessories detected. Note this is after a face is detected. Large mask could result in no face to
                        be detected.&lt;/li&gt;
                    &lt;li&gt;blur: face is blurry or not. Level returns 'Low', 'Medium' or 'High'. Value returns a number between
                        [0,1], the larger the blurrier.&lt;/li&gt;
                    &lt;li&gt;exposure: face exposure level. Level returns 'GoodExposure', 'OverExposure' or 'UnderExposure'.&lt;/li&gt;
                    &lt;li&gt;noise: noise level of face pixels. Level returns 'Low', 'Medium' and 'High'. Value returns a number between
                        [0,1], the larger the noisier&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>[
    {
        "faceId": "c5c24a82-6845-4031-9d5d-978df9175426",
        "faceRectangle": {
            "width": 78,
            "height": 78,
            "left": 394,
            "top": 54
        },
        "faceLandmarks": {
            "pupilLeft": {
                "x": 412.7,
                "y": 78.4
            },
            "pupilRight": {
                "x": 446.8,
                "y": 74.2
            },
            "noseTip": {
                "x": 437.7,
                "y": 92.4
            },
            "mouthLeft": {
                "x": 417.8,
                "y": 114.4
            },
            "mouthRight": {
                "x": 451.3,
                "y": 109.3
            },
            "eyebrowLeftOuter": {
                "x": 397.9,
                "y": 78.5
            },
            "eyebrowLeftInner": {
                "x": 425.4,
                "y": 70.5
            },
            "eyeLeftOuter": {
                "x": 406.7,
                "y": 80.6
            },
            "eyeLeftTop": {
                "x": 412.2,
                "y": 76.2
            },
            "eyeLeftBottom": {
                "x": 413.0,
                "y": 80.1
            },
            "eyeLeftInner": {
                "x": 418.9,
                "y": 78.0
            },
            "eyebrowRightInner": {
                "x": 4.8,
                "y": 69.7
            },
            "eyebrowRightOuter": {
                "x": 5.5,
                "y": 68.5
            },
            "eyeRightInner": {
                "x": 441.5,
                "y": 75.0
            },
            "eyeRightTop": {
                "x": 446.4,
                "y": 71.7
            },
            "eyeRightBottom": {
                "x": 447.0,
                "y": 75.3
            },
            "eyeRightOuter": {
                "x": 451.7,
                "y": 73.4
            },
            "noseRootLeft": {
                "x": 428.0,
                "y": 77.1
            },
            "noseRootRight": {
                "x": 435.8,
                "y": 75.6
            },
            "noseLeftAlarTop": {
                "x": 428.3,
                "y": 89.7
            },
            "noseRightAlarTop": {
                "x": 442.2,
                "y": 87.0
            },
            "noseLeftAlarOutTip": {
                "x": 424.3,
                "y": 96.4
            },
            "noseRightAlarOutTip": {
                "x": 446.6,
                "y": 92.5
            },
            "upperLipTop": {
                "x": 437.6,
                "y": 105.9
            },
            "upperLipBottom": {
                "x": 437.6,
                "y": 108.2
            },
            "underLipTop": {
                "x": 436.8,
                "y": 111.4
            },
            "underLipBottom": {
                "x": 437.3,
                "y": 114.5
            }
        },
        "faceAttributes": {
            "age": 71.0,
            "gender": "male",
            "smile": 0.88,
            "facialHair": {
                "moustache": 0.8,
                "beard": 0.1,
                "sideburns": 0.02
            },
            "glasses": "sunglasses",
            "headPose": {
                "roll": 2.1,
                "yaw": 3,
                "pitch": 0
            },
            "emotion": {
                "anger": 0.575,
                "contempt": 0,
                "disgust": 0.006,
                "fear": 0.008,
                "happiness": 0.394,
                "neutral": 0.013,
                "sadness": 0,
                "surprise": 0.004
            },
            "hair": {
                "bald": 0.0,
                "invisible": false,
                "hairColor": [
                    {"color": "brown", "confidence": 1.0},
                    {"color": "blond", "confidence": 0.88},
                    {"color": "black", "confidence": 0.48},
                    {"color": "other", "confidence": 0.11},
                    {"color": "gray", "confidence": 0.07},
                    {"color": "red", "confidence": 0.03}
                ]
            },
            "makeup": {
                "eyeMakeup": true,
                "lipMakeup": false
            },
            "occlusion": {
                "foreheadOccluded": false,
                "eyeOccluded": false,
                "mouthOccluded": false
            },
            "accessories": [
                {"type": "headWear", "confidence": 0.99},
                {"type": "glasses", "confidence": 1.0},
                {"type": "mask"," confidence": 0.87}
            ],
            "blur": {
                "blurLevel": "Medium",
                "value": 0.51
            },
            "exposure": {
                "exposureLevel": "GoodExposure",
                "value": 0.55
            },
            "noise": {
                "noiseLevel": "Low",
                "value": 0.12
            }
        }
    }
]
</doc>
          </representation>
        </response>
        <response status="400">
          <doc>Error code and message returned in JSON:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Error Code&lt;/th&gt;&lt;th&gt;Error Message Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;BadArgument&lt;/td&gt;&lt;td&gt;JSON parsing error. Bad or unrecognizable request JSON body.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;BadArgument&lt;/td&gt;&lt;td&gt;Invalid returnFaceAttributes. Supported values are: age, gender, headPose, smile, facialHair, glasses in a comma-separated format.
&lt;tr&gt;&lt;td&gt;InvalidURL&lt;/td&gt;&lt;td&gt;Invalid image format or URL. Supported formats include JPEG, PNG, GIF(the first frame) and BMP.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;InvalidURL&lt;/td&gt;&lt;td&gt;Failed to download image from the specified URL. Remote server error returned.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;InvalidImage&lt;/td&gt;&lt;td&gt;Decoding error, image format unsupported.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;InvalidImageSize&lt;/td&gt;&lt;td&gt;Image size is too small. The valid image file size should be larger than or equal to 1KB.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;InvalidImageSize&lt;/td&gt;&lt;td&gt;Image size is too big. The valid image file size should be no larger than 4MB.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "BadArgument",
        "message": "Request body is invalid."
    }
}
</doc>
          </representation>
        </response>
        <response status="401">
          <doc>Error code and message returned in JSON:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Error Code&lt;/th&gt;&lt;th&gt;Error Message Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;Unspecified&lt;/td&gt;&lt;td&gt;Invalid subscription Key or user/plan is blocked.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "Unspecified",
        "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
    }
}
</doc>
          </representation>
        </response>
        <response status="403">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 403,
        "message": "Out of call volume quota. Quota will be replenished in 2 days."
    }
}
</doc>
          </representation>
        </response>
        <response status="408">
          <doc>Operation exceeds maximum execution time.
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "OperationTimeOut",
        "message": "Request Timeout."
    }
}
</doc>
          </representation>
        </response>
        <response status="415">
          <doc>Unsupported media type error. Content-Type is not in the allowed types: &lt;br/&gt;
&lt;ol&gt;
&lt;li&gt;For an image URL, Content-Type should be application/json&lt;/li&gt;
&lt;li&gt;For a local image, Content-Type should be application/octet-stream&lt;/li&gt;
&lt;/ol&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "BadArgument",
        "message": "Invalid Media Type."
    }
}
</doc>
          </representation>
        </response>
        <response status="429">
          <representation mediaType="application/json">
            <doc>{
    "error": {
       "statusCode": 429,
        "message": "Rate limit is exceeded. Try again in 26 seconds."
    }
}
</doc>
          </representation>
        </response>
      </method>
    </resource>
    <resource path="/findsimilars">
      <doc title="Face - Find Similar">Given query face's faceId, to search the similar-looking faces from a faceId array, a face list or a large face list. faceId
array contains the faces created by
&lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236"&gt;Face - Detect&lt;/a&gt;, which will expire 24 hours after creation. A "faceListId" is created by
&lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039524b"&gt;FaceList - Create&lt;/a&gt; containing persistedFaceIds that will not expire. And a "largeFaceListId" is created by
&lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/5a157b68d2de3616c086f2cc"&gt;LargeFaceList - Create&lt;/a&gt; containing persistedFaceIds that will also not expire. Depending on the input the returned similar
faces list contains faceIds or persistedFaceIds ranked by similarity.
&lt;br/&gt;
&lt;br/&gt; Find similar has two working modes, "matchPerson" and "matchFace". "matchPerson" is the default mode that it tries to find
faces of the same person as possible by using internal same-person thresholds. It is useful to find a known person's other
photos. Note that an empty list will be returned if no faces pass the internal thresholds. "matchFace" mode ignores same-person
thresholds and returns ranked similar faces anyway, even the similarity is low. It can be used in the cases like searching
celebrity-looking faces.
&lt;h4&gt;Http Method&lt;/h4&gt;
POST</doc>
      <method name="POST">
        <request>
          <doc>JSON fields in request body:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Fields&lt;/th&gt;
            &lt;th&gt;Type&lt;/th&gt;
            &lt;th&gt;Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;faceId&lt;/td&gt;
            &lt;th&gt;String&lt;/th&gt;
            &lt;td&gt;faceId of the query face. User needs to call &lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236"&gt;Face - Detect&lt;/a&gt; first to get a valid faceId. Note that this faceId is not persisted and will expire 24 hours after the detection call.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;faceListId&lt;/td&gt;
            &lt;th&gt;String&lt;/th&gt;
            &lt;td&gt;An existing user-specified unique candidate face list, created in &lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039524b"&gt;FaceList - Create&lt;/a&gt;. Face list contains a set of persistedFaceIds which are persisted and will never expire. Parameter faceListId, largeFaceListId and faceIds should not be provided at the same time.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;largeFaceListId&lt;/td&gt;
            &lt;th&gt;String&lt;/th&gt;
            &lt;td&gt;An existing user-specified unique candidate large face list, created in &lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/5a157b68d2de3616c086f2cc"&gt;LargeFaceList - Create&lt;/a&gt;. Large face list contains a set of persistedFaceIds which are persisted and will never expire. Parameter faceListId, largeFaceListId and faceIds should not be provided at the same time.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;faceIds&lt;/td&gt;
            &lt;th&gt;Array&lt;/th&gt;
            &lt;td&gt;An array of candidate faceIds. All of them are created by &lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236"&gt;Face - Detect&lt;/a&gt; and the faceIds will expire 24 hours after the detection call. The number of faceIds is limited to 1000. Parameter faceListId, largeFaceListId and faceIds should not be provided at the same time.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;maxNumOfCandidatesReturned (optional)&lt;/td&gt;
            &lt;th&gt;Number&lt;/th&gt;
            &lt;td&gt;Optional parameter.
                &lt;br /&gt; The number of top similar faces returned.
                &lt;br /&gt; The valid range is [1, 1000].It defaults to 20. &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;mode (optional)&lt;/td&gt;
            &lt;th&gt;String&lt;/th&gt;
            &lt;td&gt;Optional parameter.
                &lt;br /&gt; Similar face searching mode. It can be "matchPerson" or "matchFace". It defaults to "matchPerson".&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "faceId": "c5c24a82-6845-4031-9d5d-978df9175426",
    "largeFaceListId": "sample_list",
    "maxNumOfCandidatesReturned": 10,
    "mode": "matchPerson"
}</doc>
          </representation>
        </request>
        <response status="200">
          <doc>A successful call returns an array of the most similar faces represented in faceId if the input parameter is faceIds or persistedFaceId if the input parameter is faceListId or largeFaceListId.
&lt;br /&gt;&lt;br /&gt; JSON fields in response body:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Fields&lt;/th&gt;&lt;th&gt;Type&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;persistedFaceId&lt;/td&gt;&lt;th&gt;String&lt;/th&gt;&lt;td&gt;persistedFaceId of candidate face when find by faceListId or largeFaceListId. persistedFaceId in face list/large face list is persisted and will not expire. As showed in below response.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;faceId&lt;/td&gt;&lt;th&gt;String&lt;/th&gt;&lt;td&gt;faceId of candidate face when find by faceIds. faceId is created by &lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236"&gt;Face - Detect&lt;/a&gt; and will expire 24 hours after the detection call. &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;confidence&lt;/td&gt;&lt;th&gt;Number&lt;/th&gt;&lt;td&gt;Similarity confidence of the candidate face. The higher confidence, the more similar. Range between [0,1].&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>[
    {
        "persistedFaceId" : "015839fb-fbd9-4f79-ace9-7675fc2f1dd9",
        "confidence" : 0.82
    },
    ...
]</doc>
          </representation>
        </response>
        <response status="400">
          <doc>Error code and message returned in JSON:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Error Code&lt;/th&gt;&lt;th&gt;Error Message Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;BadArgument&lt;/td&gt;&lt;td&gt;Invalid request body.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;BadArgument&lt;/td&gt;&lt;td&gt;Mode is invalid.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;BadArgument&lt;/td&gt;&lt;td&gt;The argument maxNumOfCandidatesReturned is not valid.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;BadArgument&lt;/td&gt;&lt;td&gt;The length of faceIds is not in a valid range.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;BadArgument&lt;/td&gt;&lt;td&gt;LargeFaceListId, faceListId and faceIds, not exactly one of them is valid.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;BadArgument&lt;/td&gt;&lt;td&gt;Face list ID is invalid.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;BadArgument&lt;/td&gt;&lt;td&gt;Large face list ID is invalid.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;BadArgument&lt;/td&gt;&lt;td&gt;LargeFaceListId, faceListId and faceIds are all null.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;BadArgument&lt;/td&gt;&lt;td&gt;2 or more of largeFaceListId, faceListId and faceIds are not null.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;FaceNotFound&lt;/td&gt;&lt;td&gt;Query face cannot be found.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;FaceListNotFound&lt;/td&gt;&lt;td&gt;Face list is not found.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;LargeFaceListNotFound&lt;/td&gt;&lt;td&gt;Large face list is not found.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;LargeFaceListNotTrained&lt;/td&gt;&lt;td&gt;Large face list is not trained.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;FaceListNotReady&lt;/td&gt;&lt;td&gt;Face list is empty.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;LargeFaceListTrainingNotFinished&lt;/td&gt;&lt;td&gt;Large face list training is not finished.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "BadArgument",
        "message": "Request body is invalid."
    }
}</doc>
          </representation>
        </response>
        <response status="401">
          <doc>Error code and message returned in JSON:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Error Code&lt;/th&gt;&lt;th&gt;Error Message Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;Unspecified&lt;/td&gt;&lt;td&gt;Invalid subscription Key or user/plan is blocked.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "Unspecified",
        "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
    }
}</doc>
          </representation>
        </response>
        <response status="403">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 403,
        "message": "Out of call volume quota. Quota will be replenished in 2 days."
    }
}</doc>
          </representation>
        </response>
        <response status="415">
          <doc>Unsupported media type error. Only "application/json" is valid for this API.
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "BadArgument",
        "message": "Invalid Media Type."
    }
}</doc>
          </representation>
        </response>
        <response status="429">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 429,
        "message": "Rate limit is exceeded. Try again in 26 seconds."
    }
}</doc>
          </representation>
        </response>
      </method>
    </resource>
    <resource path="/group">
      <doc title="Face - Group">Divide candidate faces into groups based on face similarity.
&lt;br/&gt;
&lt;ul&gt;
&lt;li&gt;The output is one or more disjointed face groups and a messyGroup. A face group contains faces
that have similar looking, often of the same person. Face groups are ranked by
group size, i.e. number of faces. Notice that faces belonging to a same person might be split into several groups in the result.
&lt;/li&gt;
&lt;li&gt;MessyGroup is a special face group containing faces that cannot find any similar counterpart face from original faces. The messyGroup will not appear in the result if all faces
found their counterparts.&lt;/li&gt;
&lt;li&gt;Group API needs at least 2 candidate faces and 1000 at most. We suggest to try &lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523a"&gt;Face - Verify&lt;/a&gt; when you only have 2 candidate faces.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Http Method&lt;/h4&gt;
POST
</doc>
      <method name="POST">
        <request>
          <doc>JSON fields in request body:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Fields&lt;/th&gt;&lt;th&gt;Type&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;faceIds&lt;/td&gt;&lt;th&gt;Array&lt;/th&gt;&lt;td&gt;Array of candidate faceId created by &lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236"&gt;Face - Detect&lt;/a&gt;. The maximum is 1000 faces.&lt;/td&gt;&lt;/tr&gt;

&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "faceIds": [
        "c5c24a82-6845-4031-9d5d-978df9175426",
        "015839fb-fbd9-4f79-ace9-7675fc2f1dd9",
        "65d083d4-9447-47d1-af30-b626144bf0fb",
        "fce92aed-d578-4d2e-8114-068f8af4492e",
        "30ea1073-cc9e-4652-b1e3-d08fb7b95315",
        "be386ab3-af91-4104-9e6d-4dae4c9fddb7",
        "fbd2a038-dbff-452c-8e79-2ee81b1aa84e",
        "b64d5e15-8257-4af2-b20a-5a750f8940e7"
    ]
}</doc>
          </representation>
        </request>
        <response status="200">
          <doc>A successful call returns one or more groups of similar faces (rank by group size) and a messyGroup.
&lt;br /&gt;&lt;br /&gt; JSON fields in response body:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Fields&lt;/th&gt;&lt;th&gt;Type&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;groups&lt;/td&gt;&lt;th&gt;Array&lt;/th&gt;&lt;td&gt;A partition of the original faces based on face similarity. Groups are ranked by number of faces.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;messyGroup&lt;/td&gt;&lt;th&gt;Array&lt;/th&gt;&lt;td&gt;Face ids array of faces that cannot find any similar faces from original faces.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "groups": [
        [
            "c5c24a82-6845-4031-9d5d-978df9175426",
            "015839fb-fbd9-4f79-ace9-7675fc2f1dd9",
            "fce92aed-d578-4d2e-8114-068f8af4492e",
            "b64d5e15-8257-4af2-b20a-5a750f8940e7"
        ],
        [
            "65d083d4-9447-47d1-af30-b626144bf0fb",
            "30ea1073-cc9e-4652-b1e3-d08fb7b95315"
        ]
    ],
    "messyGroup": [
        "be386ab3-af91-4104-9e6d-4dae4c9fddb7"
    ]
}</doc>
          </representation>
        </response>
        <response status="400">
          <doc>Error code and message returned in JSON:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Error Code&lt;/th&gt;&lt;th&gt;Error Message Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;BadArgument&lt;/td&gt;&lt;td&gt;Invalid request body.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;BadArgument&lt;/td&gt;&lt;td&gt;Candidate faces count out of range [1, 1000].&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;FaceNotFound&lt;/td&gt;&lt;td&gt;Current face is not found.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "BadArgument",
        "message": "Request body is invalid."
    }
}</doc>
          </representation>
        </response>
        <response status="401">
          <doc>Error code and message returned in JSON:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Error Code&lt;/th&gt;&lt;th&gt;Error Message Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;Unspecified&lt;/td&gt;&lt;td&gt;Invalid subscription Key or user/plan is blocked.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "Unspecified",
        "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
    }
}</doc>
          </representation>
        </response>
        <response status="403">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 403,
        "message": "Out of call volume quota. Quota will be replenished in 2 days."
    }
}</doc>
          </representation>
        </response>
        <response status="415">
          <doc>Unsupported media type error. Only "application/json" is valid for this API.
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "BadArgument",
        "message": "Invalid Media Type."
    }
}
</doc>
          </representation>
        </response>
        <response status="429">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 429,
        "message": "Rate limit is exceeded. Try again in 26 seconds."
    }
}</doc>
          </representation>
        </response>
      </method>
    </resource>
    <resource path="/identify">
      <doc title="Face - Identify">1-to-many identification to find the closest matches of the specific query person face from a person group or large person group.
&lt;br/&gt;
&lt;br/&gt; For each face in the faceIds array, Face Identify will compute similarities between the query face and all the faces in
the person group (given by personGroupId) or large person group (given by largePersonGroupId), and return candidate person(s)
for that face ranked by similarity confidence. The person group/large person group should be trained to make it ready for
identification. See more in
&lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395249"&gt;PersonGroup - Train&lt;/a&gt; and
&lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/599ae2d16ac60f11b48b5aa4"&gt;LargePersonGroup - Train&lt;/a&gt;.
&lt;br/&gt;
&lt;br/&gt; Remarks:
&lt;ul&gt;
	&lt;li&gt;The algorithm allows more than one face to be identified independently at the same request, but no more than 10 faces.&lt;/li&gt;
	&lt;li&gt;Each person in the person group/large person group could have more than one face, but no more than 248 faces.&lt;/li&gt;
	&lt;li&gt;Identification works well for frontal faces and near-frontal faces.&lt;/li&gt;
	&lt;li&gt;Number of candidates returned is restricted by maxNumOfCandidatesReturned and confidenceThreshold. If no person is identified,
		the returned candidates will be an empty array.&lt;/li&gt;
	&lt;li&gt;Try
		&lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237"&gt;Face - Find Similar&lt;/a&gt; when you need to find similar faces from a face list/large face list instead of a person group/large
		person group.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Http Method&lt;/h4&gt;
POST</doc>
      <method name="POST">
        <request>
          <doc>JSON fields in request body:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Fields&lt;/th&gt;
            &lt;th&gt;Type&lt;/th&gt;
            &lt;th&gt;Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;faceIds&lt;/td&gt;
            &lt;th&gt;Array&lt;/th&gt;
            &lt;td&gt; Array of query faces faceIds, created by the &lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236"&gt;Face - Detect&lt;/a&gt;. Each of the faces are identified independently. The valid number of faceIds is between [1, 10].&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;personGroupId&lt;/td&gt;
            &lt;th&gt;String&lt;/th&gt;
            &lt;td&gt;personGroupId of the target person group, created by &lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395244"&gt;PersonGroup - Create&lt;/a&gt;. Parameter personGroupId and largePersonGroupId should not be provided at the same time.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;largePersonGroupId&lt;/td&gt;
            &lt;th&gt;String&lt;/th&gt;
            &lt;td&gt;largePersonGroupId of the target large person group, created by &lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/599acdee6ac60f11b48b5a9d"&gt;LargePersonGroup - Create&lt;/a&gt;. Parameter personGroupId and largePersonGroupId should not be provided at the same time.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;maxNumOfCandidatesReturned (optional)&lt;/td&gt;
            &lt;th&gt;Number&lt;/th&gt;
            &lt;td&gt;The range of maxNumOfCandidatesReturned is between 1 and 100 (default is 10).&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;confidenceThreshold (optional)&lt;/td&gt;
            &lt;th&gt;Number&lt;/th&gt;
            &lt;td&gt;Optional parameter.
                &lt;br /&gt; Customized identification confidence threshold, in the range of [0, 1]. Advanced user can tweak this value to override default internal threshold for better precision on their scenario data. Note there is no guarantee of this threshold value working on other data and after algorithm updates.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "largePersonGroupId": "sample_group",
    "faceIds": [
        "c5c24a82-6845-4031-9d5d-978df9175426",
        "65d083d4-9447-47d1-af30-b626144bf0fb"
    ],
    "maxNumOfCandidatesReturned": 1,
    "confidenceThreshold": 0.5
}</doc>
          </representation>
        </request>
        <response status="200">
          <doc>A successful call returns the identified candidate person(s) for each query face.
&lt;br/&gt;&lt;br/&gt; JSON fields in response body:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Fields&lt;/th&gt;&lt;th&gt;Type&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;faceId&lt;/td&gt;&lt;th&gt;String&lt;/th&gt;&lt;td&gt;faceId of the query face.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;candidates&lt;/td&gt;&lt;th&gt;Array&lt;/th&gt;&lt;td&gt;Identified person candidates for that face (ranked by confidence). Array size should be no larger than input maxNumOfCandidatesReturned. If no person is identified, will return an empty array. &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;personId&lt;/td&gt;&lt;th&gt;String&lt;/th&gt;&lt;td&gt;personId of candidate person.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;confidence&lt;/td&gt;&lt;th&gt;Number&lt;/th&gt;&lt;td&gt;A float number between 0.0 and 1.0.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    [
        {
            "faceId": "c5c24a82-6845-4031-9d5d-978df9175426",
            "candidates": [
                {
                    "personId": "25985303-c537-4467-b41d-bdb45cd95ca1",
                    "confidence": 0.92
                }
            ]
        },
        {
            "faceId": "65d083d4-9447-47d1-af30-b626144bf0fb",
            "candidates": [
                {
                    "personId": "2ae4935b-9659-44c3-977f-61fac20d0538",
                    "confidence": 0.89
                }
            ]
        }
    ]
}</doc>
          </representation>
        </response>
        <response status="400">
          <doc>Error code and message returned in JSON:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Error Code&lt;/th&gt;&lt;th&gt;Error Message Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;BadArgument&lt;/td&gt;&lt;td&gt;Invalid request body.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;BadArgument&lt;/td&gt;&lt;td&gt;The argument maxNumOfCandidatesReturned is not valid. Range is [1,5]&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;BadArgument&lt;/td&gt;&lt;td&gt;The argument confidenceThreshold is not valid. Range is [0, 1]&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;BadArgument&lt;/td&gt;&lt;td&gt;Face ID is invalid.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;BadArgument&lt;/td&gt;&lt;td&gt;Person group ID is invalid. Valid format should be a string composed by numbers, English letters in lower case, '-', '_', and no longer than 64 characters.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;BadArgument&lt;/td&gt;&lt;td&gt;Large person group ID is invalid. Valid format should be a string composed by numbers, English letters in lower case, '-', '_', and no longer than 64 characters.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;PersonGroupIdAndLargePersonGroupIdBothNotNull&lt;/td&gt;&lt;td&gt;Large person group ID and person group ID are both not null.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;PersonGroupIdAndLargePersonGroupIdBothNull&lt;/td&gt;&lt;td&gt;Large person group ID and person group ID are both null.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;PersonGroupNotFound&lt;/td&gt;&lt;td&gt;Person group is not found.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;LargePersonGroupNotFound&lt;/td&gt;&lt;td&gt;Large person group is not found.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;FaceNotFound&lt;/td&gt;&lt;td&gt;Face is not found.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;PersonGroupNotTrained&lt;/td&gt;&lt;td&gt;Person group not trained.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;LargePersonGroupNotTrained&lt;/td&gt;&lt;td&gt;Large person group not trained.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;PersonGroupTrainingNotFinished&lt;/td&gt;&lt;td&gt;Person group is under training.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;LargePersonGroupTrainingNotFinished&lt;/td&gt;&lt;td&gt;Large person group is under training.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "BadArgument",
        "message": "Large Person group is invalid."
    }
}</doc>
          </representation>
        </response>
        <response status="401">
          <doc>Error code and message returned in JSON:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Error Code&lt;/th&gt;&lt;th&gt;Error Message Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;BadArgument&lt;/td&gt;&lt;td&gt;Invalid request body.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;BadArgument&lt;/td&gt;&lt;td&gt;The argument maxNumOfCandidatesReturned is not valid.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;BadArgument&lt;/td&gt;&lt;td&gt;The argument confidenceThreshold is not valid.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;BadArgument&lt;/td&gt;&lt;td&gt;Face ID is invalid.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;BadArgument&lt;/td&gt;&lt;td&gt;The length of faceIds is not in a valid range.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;BadArgument&lt;/td&gt;&lt;td&gt;Person group ID is invalid. Valid format should be a string composed by numbers, English letters in lower case, '-', '_', and no longer than 64 characters.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;BadArgument&lt;/td&gt;&lt;td&gt;Large person group ID is invalid. Valid format should be a string composed by numbers, English letters in lower case, '-', '_', and no longer than 64 characters.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;PersonGroupIdAndLargePersonGroupIdBothNotNull&lt;/td&gt;&lt;td&gt;Large person group ID and person group ID are both not null.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;PersonGroupIdAndLargePersonGroupIdBothNull&lt;/td&gt;&lt;td&gt;Large person group ID and person group ID are both null.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;PersonGroupNotFound&lt;/td&gt;&lt;td&gt;Person group is not found.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;LargePersonGroupNotFound&lt;/td&gt;&lt;td&gt;Large person group is not found.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;FaceNotFound&lt;/td&gt;&lt;td&gt;Face is not found.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;PersonGroupNotTrained&lt;/td&gt;&lt;td&gt;Person group not trained.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;LargePersonGroupNotTrained&lt;/td&gt;&lt;td&gt;Large person group not trained.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "Unspecified",
        "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
    }
}</doc>
          </representation>
        </response>
        <response status="403">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 403,
        "message": "Out of call volume quota. Quota will be replenished in 2 days."
    }
}</doc>
          </representation>
        </response>
        <response status="409">
          <doc>Training process is conflict with identify. Try identify again when training is finished.
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "LargePersonGroupTrainingNotFinished",
        "message": "Large person group is under training."
    }
}</doc>
          </representation>
        </response>
        <response status="415">
          <doc>Unsupported media type error. Only "application/json" is valid for this API.
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "BadArgument",
        "message": "Invalid Media Type."
    }
}</doc>
          </representation>
        </response>
        <response status="429">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 429,
        "message": "Rate limit is exceeded. Try again in 26 seconds."
    }
}</doc>
          </representation>
        </response>
      </method>
    </resource>
    <resource path="/verify">
      <doc title="Face - Verify">Verify whether two faces belong to a same person or whether one face belongs to a person.
&lt;br/&gt;&lt;br/&gt;
Remarks:
&lt;ul&gt;
&lt;li&gt;This API works well for frontal and near-frontal faces. &lt;/li&gt;
&lt;li&gt;For the scenarios that are sensitive to accuracy please make your own judgment.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Http Method&lt;/h4&gt;
POST
</doc>
      <method name="POST">
        <request>
          <doc>JSON fields in face to face verification request body:
&lt;table class="element table"&gt;
	&lt;thead&gt;
		&lt;tr&gt;
			&lt;th&gt;Fields&lt;/th&gt;
			&lt;th&gt;Type&lt;/th&gt;
			&lt;th&gt;Description&lt;/th&gt;
		&lt;/tr&gt;
	&lt;/thead&gt;
	&lt;tbody&gt;
		&lt;tr&gt;
			&lt;td&gt;faceId1&lt;/td&gt;
			&lt;th&gt;String&lt;/th&gt;
			&lt;td&gt;faceId of one face, comes from
				&lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236"&gt;Face - Detect&lt;/a&gt;.&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td&gt;faceId2&lt;/td&gt;
			&lt;th&gt;String&lt;/th&gt;
			&lt;td&gt;faceId of another face, comes from
				&lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236"&gt;Face - Detect&lt;/a&gt;.&lt;/td&gt;
		&lt;/tr&gt;
	&lt;/tbody&gt;
&lt;/table&gt; JSON fields in face to person verification request body:
&lt;table class="element table"&gt;
	&lt;thead&gt;
		&lt;tr&gt;
			&lt;th&gt;Fields&lt;/th&gt;
			&lt;th&gt;Type&lt;/th&gt;
			&lt;th&gt;Description&lt;/th&gt;
		&lt;/tr&gt;
	&lt;/thead&gt;
	&lt;tbody&gt;
		&lt;tr&gt;
			&lt;td&gt;faceId&lt;/td&gt;
			&lt;th&gt;String&lt;/th&gt;
			&lt;td&gt;faceId of the face, comes from
				&lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236"&gt;Face - Detect&lt;/a&gt;.&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td&gt;personGroupId&lt;/td&gt;
			&lt;th&gt;String&lt;/th&gt;
			&lt;td&gt;Using existing personGroupId and personId for fast loading a specified person. personGroupId is created in
				&lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395244"&gt;PersonGroup - Create&lt;/a&gt;. Parameter personGroupId and largePersonGroupId should not be provided at the same time.&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td&gt;largePersonGroupId&lt;/td&gt;
			&lt;th&gt;String&lt;/th&gt;
			&lt;td&gt;Using existing largePersonGroupId and personId for fast loading a specified person. largePersonGroupId is created in
				&lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/599acdee6ac60f11b48b5a9d"&gt;LargePersonGroup - Create&lt;/a&gt;. Parameter personGroupId and largePersonGroupId should not be provided at the same time.&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td&gt;personId&lt;/td&gt;
			&lt;th&gt;String&lt;/th&gt;
			&lt;td&gt;Specify a certain person in a person group or a large person group. personId is created in
				&lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523c"&gt;PersonGroup Person - Create&lt;/a&gt; or
				&lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/599adcba3a7b9412a4d53f40"&gt;LargePersonGroup Person - Create&lt;/a&gt;.&lt;/td&gt;
		&lt;/tr&gt;
	&lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "faceId": "c5c24a82-6845-4031-9d5d-978df9175426",
    "personId": "815df99c-598f-4926-930a-a734b3fd651c",
    "largePersonGroupId": "sample_group"
}
</doc>
          </representation>
        </request>
        <response status="200">
          <doc>A successful call returns the verification result.
&lt;br /&gt;&lt;br /&gt; JSON fields in response body:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Fields&lt;/th&gt;&lt;th&gt;Type&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;isIdentical&lt;/td&gt;&lt;th&gt;Boolean&lt;/th&gt;&lt;td&gt;True if the two faces belong to the same person or the face belongs to the person, otherwise false.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;confidence&lt;/td&gt;&lt;th&gt;Number&lt;/th&gt;&lt;td&gt;A number indicates the similarity confidence of whether two faces belong to the same person, or whether the face belongs to the person. By default, isIdentical is set to True if similarity confidence is greater than or equal to 0.5. This is useful for advanced users to override "isIdentical" and fine-tune the result on their own data.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "isIdentical": true,
    "confidence": 0.9
}</doc>
          </representation>
        </response>
        <response status="400">
          <doc>Error code and message returned in JSON:
&lt;table class="element table"&gt;
	&lt;thead&gt;
		&lt;tr&gt;
			&lt;th&gt;Error Code&lt;/th&gt;
			&lt;th&gt;Error Message Description&lt;/th&gt;
		&lt;/tr&gt;
	&lt;/thead&gt;
	&lt;tbody&gt;
		&lt;tr&gt;
			&lt;td&gt;BadArgument&lt;/td&gt;
			&lt;td&gt;Bad and unrecognizable JSON body.&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td&gt;BadArgument&lt;/td&gt;
			&lt;td&gt;Face ID is invalid. faceId1, faceId2 or faceId is invalid and valid faceId comes from &lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236"&gt;Face - Detect&lt;/a&gt;. &lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td&gt;BadArgument&lt;/td&gt;
			&lt;td&gt;Person ID is invalid. Valid personId is generated from &lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523c"&gt;PersonGroup Person - Create&lt;/a&gt; or &lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/599adcba3a7b9412a4d53f40"&gt;LargePersonGroup Person - Create&lt;/a&gt; for existing person.&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td&gt;BadArgument&lt;/td&gt;
			&lt;td&gt;Request body is invalid.&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td&gt;BadArgument&lt;/td&gt;
			&lt;td&gt;Person group ID or Large Perosn Group ID is invalid. Valid format should be a string composed by numbers, English letters in lower case, '-', '_', and no longer than 64 characters.&lt;/td&gt;
		&lt;/tr&gt;
	&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "BadArgument",
        "message": "Request body is invalid."
    }
}</doc>
          </representation>
        </response>
        <response status="401">
          <doc>Error code and message returned in JSON:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Error Code&lt;/th&gt;&lt;th&gt;Error Message Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;Unspecified&lt;/td&gt;&lt;td&gt;Invalid subscription Key or user/plan is blocked.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "Unspecified",
        "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
    }
}</doc>
          </representation>
        </response>
        <response status="403">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 403,
        "message": "Out of call volume quota. Quota will be replenished in 2 days."
    }
}</doc>
          </representation>
        </response>
        <response status="404">
          <doc>Error code and message returned in JSON:
&lt;table class="element table"&gt;
	&lt;thead&gt;
		&lt;tr&gt;
			&lt;th&gt;Error Code&lt;/th&gt;
			&lt;th&gt;Error Message Description&lt;/th&gt;
		&lt;/tr&gt;
	&lt;/thead&gt;
	&lt;tbody&gt;
		&lt;tr&gt;
			&lt;td&gt;FaceNotFound&lt;/td&gt;
			&lt;td&gt;Face is not found. The faceId is expired or not exist.&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td&gt;PersonNotFound&lt;/td&gt;
			&lt;td&gt;Person is not found.&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td&gt;PersonGroupNotFound&lt;/td&gt;
			&lt;td&gt;Person Group is not found.&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td&gt;LargePersonGroupNotFound&lt;/td&gt;
			&lt;td&gt;Large Person Group is not found.&lt;/td&gt;
		&lt;/tr&gt;
	&lt;/tbody&gt;
	&lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "LargePersonGroupNotFound",
        "message": "Large person group is not found."
    }
}
</doc>
          </representation>
        </response>
        <response status="415">
          <doc>Unsupported media type error. Only "application/json" is valid for this API.
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "BadArgument",
        "message": "Invalid Media Type."
    }
}
</doc>
          </representation>
        </response>
        <response status="429">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 429,
        "message": "Rate limit is exceeded. Try again in 26 seconds."
    }
}</doc>
          </representation>
        </response>
      </method>
    </resource>
    <resource path="/persongroups/{personGroupId}/persons/{personId}/persistedFaces">
      <doc title="PersonGroup Person - Add Face">Add a face image to a person into a person group for face identification or verification. To deal with the image of multiple
faces, input face can be specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the
added face. The face image and related info will be stored on server until
&lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523e"&gt;PersonGroup PersonFace - Delete&lt;/a&gt;,
&lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523d"&gt;PersonGroup Person - Delete&lt;/a&gt; or
&lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395245"&gt;PersonGroup - Delete&lt;/a&gt; is called.
&lt;br /&gt; Note persistedFaceId is different from faceId generated by
&lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236"&gt;Face - Detect&lt;/a&gt;.
&lt;ul&gt;
    &lt;li&gt;Higher face image quality means better recognition precision. Please consider high-quality faces: frontal, clear, and
        face size is 200x200 pixels (100 pixels between eyes) or bigger.&lt;/li&gt;
    &lt;li&gt;Each person entry can hold up to 248 faces.&lt;/li&gt;
    &lt;li&gt;JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 4MB.&lt;/li&gt;
    &lt;li&gt;"targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the provided
        "targetFace" rectangle is not returned from
        &lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236"&gt;Face - Detect&lt;/a&gt;, there’s no guarantee to detect and add the face successfully.&lt;/li&gt;
    &lt;li&gt;Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause failures.&lt;/li&gt;
    &lt;li&gt;Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting faces to/from different persons
        are processed in parallel.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Http Method&lt;/h4&gt;
POST</doc>
      <param name="personGroupId" style="template" type="xs:string" required="true">
        <doc>Specifying the person group containing the target person.</doc>
      </param>
      <param name="personId" style="template" type="xs:string" required="true">
        <doc>Target person that the face is added to.</doc>
      </param>
      <method name="POST">
        <request>
          <doc>
&lt;br/&gt;&lt;br/&gt; JSON fields in request body:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Fields&lt;/th&gt;&lt;th&gt;Type&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;url&lt;/td&gt;&lt;th&gt;String&lt;/th&gt;&lt;td&gt;Face image URL. Valid image size is from 1KB to 4MB. Only one face is allowed per image.&lt;/td&gt;&lt;/tr&gt;

&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <param name="userData" style="query" type="xs:string">
            <doc>User-specified data about the target face to add for any purpose. The maximum length is 1KB.</doc>
          </param>
          <param name="targetFace" style="query" type="xs:string">
            <doc>A face rectangle to specify the target face to be added to a person, in the format of "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If there is more than one face in the image, targetFace is required to specify which face to add. No targetFace means there is only one face detected in the entire image.</doc>
          </param>
          <representation mediaType="application/json">
            <doc>{
    "url": "http://example.com/1.jpg"
}</doc>
          </representation>
          <representation mediaType="application/octet-stream">
            <doc>{
    [binary data]
}</doc>
          </representation>
        </request>
        <response status="200">
          <doc>
A successful call returns the new persistedFaceId.
&lt;br/&gt;&lt;br/&gt; JSON fields in response body:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Fields&lt;/th&gt;&lt;th&gt;Type&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;persistedFaceId&lt;/td&gt;&lt;th&gt;String&lt;/th&gt;&lt;td&gt;persistedFaceId of the added face, which is persisted and will not expire. Different from faceId which is created in &lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236"&gt;Face - Detect&lt;/a&gt; and will expire in 24 hours after the detection call. &lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "persistedFaceId": "B8D802CF-DD8F-4E61-B15C-9E6C5844CCBA"
}</doc>
          </representation>
        </response>
        <response status="400">
          <doc>Error code and message returned in JSON:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Error Code&lt;/th&gt;&lt;th&gt;Error Message Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;BadArgument&lt;/td&gt;&lt;td&gt;'userData' is too long.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;BadArgument&lt;/td&gt;&lt;td&gt;Invalid request body.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;BadArgument&lt;/td&gt;&lt;td&gt;Argument targetFace out of range, targetFace is valid but it's intersection with the entire image is empty.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;BadArgument&lt;/td&gt;&lt;td&gt;Invalid argument targetFace. Caused by invalid string format or invalid left/top/height/width value. &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;InvalidImage&lt;/td&gt;&lt;td&gt;Decoding error, image format unsupported.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;InvalidImage&lt;/td&gt;&lt;td&gt;No face detected in the image or in the specified targetFace area.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;InvalidImage&lt;/td&gt;&lt;td&gt;There is more than 1 face in the image or in the specified targetFace area.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;InvalidImageSize&lt;/td&gt;&lt;td&gt;Image size is too small.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;InvalidImageSize&lt;/td&gt;&lt;td&gt;Image size is too big.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;InvalidURL&lt;/td&gt;&lt;td&gt;Invalid image URL.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;InvalidURL&lt;/td&gt;&lt;td&gt;Failed to download from target server. Remote server error returned.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "BadArgument",
        "message": "Request body is invalid."
    }
}</doc>
          </representation>
        </response>
        <response status="401">
          <doc>
Error code and message returned in JSON:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Error Code&lt;/th&gt;&lt;th&gt;Error Message Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;Unspecified&lt;/td&gt;&lt;td&gt;Invalid subscription Key or user/plan is blocked.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "Unspecified",
        "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
    }
}</doc>
          </representation>
        </response>
        <response status="403">
          <doc>
Persisted face number reached limit, maximum is 248 per person.
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "QuotaExceeded",
        "message": "Persisted face number reached limit."
        }
}</doc>
          </representation>
        </response>
        <response status="404">
          <doc>
Error code and message returned in JSON:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Error Code&lt;/th&gt;&lt;th&gt;Error Message Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;PersonGroupNotFound&lt;/td&gt;&lt;td&gt;Person group ID is invalid. Valid format should be a string composed by numbers, English letters in lower case, '-', '_', and no longer than 64 characters.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;PersonGroupNotFound&lt;/td&gt;&lt;td&gt;Person group is not found.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;PersonNotFound&lt;/td&gt;&lt;td&gt;Person ID is invalid.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;PersonNotFound&lt;/td&gt;&lt;td&gt;Person is not found.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "PersonGroupNotFound",
        "message": "Person group is not found."
    }
}</doc>
          </representation>
        </response>
        <response status="408">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "OperationTimeOut",
        "message": "Request Timeout."
    }
}</doc>
          </representation>
        </response>
        <response status="409">
          <doc>
Error code and message returned in JSON:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Error Code&lt;/th&gt;&lt;th&gt;Error Message Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;PersonGroupTrainingNotFinished&lt;/td&gt;&lt;td&gt;The person group is still under training. Try again after training completed.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;ConcurrentOperationConflict&lt;/td&gt;&lt;td&gt;Concurrent operation conflict on requested resource.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "PersonGroupTrainingNotFinished",
        "message": "Person group is under training."
    }
}</doc>
          </representation>
        </response>
        <response status="415">
          <doc>
Unsupported media type error. Content-Type is not in the allowed types: &lt;br/&gt;
&lt;ol&gt;
&lt;li&gt;For an image URL, Content-Type should be application/json&lt;/li&gt;
&lt;li&gt;For a local image, Content-Type should be application/octet-stream&lt;/li&gt;
&lt;/ol&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "BadArgument",
        "message": "Invalid Media Type."
    }
}</doc>
          </representation>
        </response>
        <response status="429">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 429,
        "message": "Rate limit is exceeded. Try again in 26 seconds."
    }
}</doc>
          </representation>
        </response>
      </method>
    </resource>
    <resource path="/persongroups/{personGroupId}/persons">
      <doc title="PersonGroup Person - Create">Create a new person in a specified person group. To add face to this person, please call
&lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523b"&gt;PersonGroup PersonFace - Add&lt;/a&gt;.
&lt;br/&gt;
&lt;ul&gt;
    &lt;li&gt;Free-tier subscription quota:
        &lt;ul&gt;
            &lt;li&gt;1,000 persons in all person groups.&lt;/li&gt;
        &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;S0-tier subscription quota:
        &lt;ul&gt;
            &lt;li&gt;10,000 persons per person group.&lt;/li&gt;
            &lt;li&gt;1,000,000 person groups.&lt;/li&gt;
            &lt;li&gt;100,000,000 persons in all person groups.&lt;/li&gt;
        &lt;/ul&gt;
    &lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Http Method&lt;/h4&gt;
POST</doc>
      <param name="personGroupId" style="template" type="xs:string" required="true">
        <doc>Specifying the target person group to create the person.</doc>
      </param>
      <method name="POST">
        <request>
          <doc>
JSON fields in request body:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Fields&lt;/th&gt;&lt;th&gt;Type&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;name&lt;/td&gt;&lt;th&gt;String&lt;/th&gt;&lt;td&gt;Display name of the target person. The maximum length is 128.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;userData (optional)&lt;/td&gt;&lt;th&gt;String&lt;/th&gt;&lt;td&gt;Optional fields for user-provided data attached to a person. Size limit is 16KB.&lt;/td&gt;&lt;/tr&gt;

&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "name": "Person1",
    "userData": "User-provided data attached to the person."
}</doc>
          </representation>
        </request>
        <response status="200">
          <doc>
A successful call returns a new personId created.
&lt;br/&gt;&lt;br/&gt;
JSON fields in response body:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Fields&lt;/th&gt;&lt;th&gt;Type&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;personId&lt;/td&gt;&lt;th&gt;String&lt;/th&gt;&lt;td&gt;personID of the new created person.&lt;/td&gt;&lt;/tr&gt;

&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "personId": "25985303-c537-4467-b41d-bdb45cd95ca1"
}</doc>
          </representation>
        </response>
        <response status="400">
          <doc>
Error code and message returned in JSON:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Error Code&lt;/th&gt;&lt;th&gt;Error Message Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;BadArgument&lt;/td&gt;&lt;td&gt;'name' is too long.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;BadArgument&lt;/td&gt;&lt;td&gt;'userData' is too long.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;BadArgument&lt;/td&gt;&lt;td&gt;Bad and unrecognizable JSON body.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "BadArgument",
        "message": "'userData' is too long."
    }
}</doc>
          </representation>
        </response>
        <response status="401">
          <doc>
Error code and message returned in JSON:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Error Code&lt;/th&gt;&lt;th&gt;Error Message Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;Unspecified&lt;/td&gt;&lt;td&gt;Invalid subscription Key or user/plan is blocked.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "Unspecified",
        "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
    }
}</doc>
          </representation>
        </response>
        <response status="403">
          <doc>Person number reached subscription level limit or person group level limit.
Free tier subscriptions have a limit of 1,000 persons per Person Group and 1,000 persons total per subscription. The S0 tier subscriptions have these limits: 10,000 Persons per Person Group, 100M Persons total and 1M Person Groups per subscription.
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "QuotaExceeded",
        "message": "Person number reached subscription level limit."
    }
}</doc>
          </representation>
        </response>
        <response status="404">
          <doc>
Error code and message returned in JSON:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Error Code&lt;/th&gt;&lt;th&gt;Error Message Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;PersonGroupNotFound&lt;/td&gt;&lt;td&gt;Person group ID is invalid. Valid format should be a string composed by numbers, English letters in lower case, '-', '_', and no longer than 64 characters.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;PersonGroupNotFound&lt;/td&gt;&lt;td&gt;Person group is not found.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "PersonGroupNotFound",
        "message": "Face list is not found."
    }
}</doc>
          </representation>
        </response>
        <response status="409">
          <doc>
Error code and message returned in JSON:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Error Code&lt;/th&gt;&lt;th&gt;Error Message Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;PersonGroupTrainingNotFinished&lt;/td&gt;&lt;td&gt;The person group is still under training. Try again after training completed.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;ConcurrentOperationConflict&lt;/td&gt;&lt;td&gt;Concurrent operation conflict on requested resource.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "PersonGroupTrainingNotFinished",
        "message": "Person group is under training."
    }
}</doc>
          </representation>
        </response>
        <response status="415">
          <doc>Unsupported media type error. Only "application/json" is valid for this API.</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "BadArgument",
        "message": "Invalid Media Type."
    }
}</doc>
          </representation>
        </response>
        <response status="429">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 429,
        "message": "Rate limit is exceeded. Try again in 26 seconds."
    }
}</doc>
          </representation>
        </response>
      </method>
    </resource>
    <resource path="/persongroups/{personGroupId}/persons/{personId}">
      <doc title="PersonGroup Person - Delete">Delete an existing person from a person group. All stored person data, and face images in the person entry will be deleted.
&lt;h4&gt;Http Method&lt;/h4&gt;
DELETE</doc>
      <param name="personGroupId" style="template" type="xs:string" required="true">
        <doc>Specifying the person group containing the person.</doc>
      </param>
      <param name="personId" style="template" type="xs:string" required="true">
        <doc>The target personId to delete.</doc>
      </param>
      <method name="DELETE">
        <request />
        <response status="200">
          <doc>
A successful call returns an empty response body.
</doc>
        </response>
        <response status="401">
          <doc>
Error code and message returned in JSON:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Error Code&lt;/th&gt;&lt;th&gt;Error Message Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;Unspecified&lt;/td&gt;&lt;td&gt;Invalid subscription Key or user/plan is blocked.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "Unspecified",
        "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
    }
}</doc>
          </representation>
        </response>
        <response status="403">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 403,
        "message": "Out of call volume quota. Quota will be replenished in 2 days."
    }
}</doc>
          </representation>
        </response>
        <response status="404">
          <doc>
Error code and message returned in JSON:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Error Code&lt;/th&gt;&lt;th&gt;Error Message Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;PersonGroupNotFound&lt;/td&gt;&lt;td&gt;Person group ID is invalid. Valid format should be a string composed by numbers, English letters in lower case, '-', '_', and no longer than 64 characters.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;PersonGroupNotFound&lt;/td&gt;&lt;td&gt;Person group is not found.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;PersonNotFound&lt;/td&gt;&lt;td&gt;Person ID is invalid.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;PersonNotFound&lt;/td&gt;&lt;td&gt;Person is not found.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "PersonGroupNotFound",
        "message": "Person group is not found."
    }
}</doc>
          </representation>
        </response>
        <response status="409">
          <doc>
Error code and message returned in JSON:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Error Code&lt;/th&gt;&lt;th&gt;Error Message Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;PersonGroupTrainingNotFinished&lt;/td&gt;&lt;td&gt;The person group is still under training. Try again after training completed.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;ConcurrentOperationConflict&lt;/td&gt;&lt;td&gt;Concurrent operation conflict on requested resource.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "PersonGroupTrainingNotFinished",
        "message": "Person group is under training."
    }
}</doc>
          </representation>
        </response>
        <response status="429">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 429,
        "message": "Rate limit is exceeded. Try again in 26 seconds."
    }
}</doc>
          </representation>
        </response>
      </method>
    </resource>
    <resource path="/persongroups/{personGroupId}/persons/{personId}/persistedFaces/{persistedFaceId}">
      <doc title="PersonGroup Person - Delete Face">Delete a face from a person in a person group. Face data and image related to this face entry will be also deleted.
&lt;br /&gt; Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting faces to/from different persons are processed
in parallel.
&lt;br /&gt;
&lt;h4&gt;Http Method&lt;/h4&gt;
DELETE</doc>
      <param name="personGroupId" style="template" type="xs:string" required="true">
        <doc>Specifying the person group containing the target person.</doc>
      </param>
      <param name="personId" style="template" type="xs:string" required="true">
        <doc>Specifying the person that the target persisted face belong to.</doc>
      </param>
      <param name="persistedFaceId" style="template" type="xs:string" required="true">
        <doc>The persisted face to remove. This persistedFaceId is returned from &lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523b"&gt;PersonGroup PersonFace - Add&lt;/a&gt;.</doc>
      </param>
      <method name="DELETE">
        <request />
        <response status="200">
          <doc>A successful call returns an empty response body.</doc>
        </response>
        <response status="401">
          <doc>
Error code and message returned in JSON:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Error Code&lt;/th&gt;&lt;th&gt;Error Message Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;Unspecified&lt;/td&gt;&lt;td&gt;Invalid subscription Key or user/plan is blocked.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "Unspecified",
        "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
    }
}</doc>
          </representation>
        </response>
        <response status="403">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 403,
        "message": "Out of call volume quota. Quota will be replenished in 2 days."
    }
}</doc>
          </representation>
        </response>
        <response status="404">
          <doc>
Error code and message returned in JSON:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Error Code&lt;/th&gt;&lt;th&gt;Error Message Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;PersistedFaceNotFound&lt;/td&gt;&lt;td&gt;Face ID is invalid.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;PersistedFaceNotFound&lt;/td&gt;&lt;td&gt;Face is not found.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;PersonGroupNotFound&lt;/td&gt;&lt;td&gt;Person group ID is invalid. Valid format should be a string composed by numbers, English letters in lower case, '-', '_', and no longer than 64 characters.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;PersonGroupNotFound&lt;/td&gt;&lt;td&gt;Person group is not found.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;PersonNotFound&lt;/td&gt;&lt;td&gt;Person ID is invalid.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;PersonNotFound&lt;/td&gt;&lt;td&gt;Person is not found.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "PersonGroupNotFound",
        "message": "Person group is not found."
    }
}</doc>
          </representation>
        </response>
        <response status="409">
          <doc>
Error code and message returned in JSON:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Error Code&lt;/th&gt;&lt;th&gt;Error Message Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;PersonGroupTrainingNotFinished&lt;/td&gt;&lt;td&gt;The person group is still under training. Try again after training completed.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;ConcurrentOperationConflict&lt;/td&gt;&lt;td&gt;Concurrent operation conflict on requested resource.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "PersonGroupTrainingNotFinished",
        "message": "Person group is under training."
    }
}</doc>
          </representation>
        </response>
        <response status="429">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 429,
        "message": "Rate limit is exceeded. Try again in 26 seconds."
    }
}</doc>
          </representation>
        </response>
      </method>
    </resource>
    <resource path="/persongroups/{personGroupId}/persons/{personId}">
      <doc title="PersonGroup Person - Get">Retrieve a person's name and userData, and the persisted faceIds representing the registered person face image.
&lt;h4&gt;Http Method&lt;/h4&gt;
GET</doc>
      <param name="personGroupId" style="template" type="xs:string" required="true">
        <doc>Specifying the person group containing the target person.</doc>
      </param>
      <param name="personId" style="template" type="xs:string" required="true">
        <doc>Specifying the target person.</doc>
      </param>
      <method name="GET">
        <request />
        <response status="200">
          <doc>
A successful call returns the person's information.
&lt;br/&gt;&lt;br/&gt; JSON fields in response body:

&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Fields&lt;/th&gt;&lt;th&gt;Type&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;personId&lt;/td&gt;&lt;th&gt;String&lt;/th&gt;&lt;td&gt;personId of the retrieved person.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;persistedFaceIds&lt;/td&gt;&lt;th&gt;Array&lt;/th&gt;&lt;td&gt;persistedFaceIds of registered faces in the person. These persistedFaceIds are returned from &lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523b"&gt;PersonGroup PersonFace - Add&lt;/a&gt;, and will not expire.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;name&lt;/td&gt;&lt;th&gt;String&lt;/th&gt;&lt;td&gt;Person's display name.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;userData&lt;/td&gt;&lt;th&gt;String&lt;/th&gt;&lt;td&gt;User-provided data attached to the person.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "personId": "25985303-c537-4467-b41d-bdb45cd95ca1",
    "persistedFaceIds": [
        "015839fb-fbd9-4f79-ace9-7675fc2f1dd9",
        "fce92aed-d578-4d2e-8114-068f8af4492e",
        "b64d5e15-8257-4af2-b20a-5a750f8940e7"
    ],
    "name": "Ryan",
    "userData": "User-provided data attached to the person."
}</doc>
          </representation>
        </response>
        <response status="401">
          <doc>
Error code and message returned in JSON:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Error Code&lt;/th&gt;&lt;th&gt;Error Message Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;Unspecified&lt;/td&gt;&lt;td&gt;Invalid subscription Key or user/plan is blocked.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "Unspecified",
        "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
    }
}</doc>
          </representation>
        </response>
        <response status="403">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 403,
        "message": "Out of call volume quota. Quota will be replenished in 2 days."
    }
}</doc>
          </representation>
        </response>
        <response status="404">
          <doc>
Error code and message returned in JSON:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Error Code&lt;/th&gt;&lt;th&gt;Error Message Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;PersonGroupNotFound&lt;/td&gt;&lt;td&gt;Person group ID is invalid. Valid format should be a string composed by numbers, English letters in lower case, '-', '_', and no longer than 64 characters.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;PersonGroupNotFound&lt;/td&gt;&lt;td&gt;Person group is not found.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;PersonNotFound&lt;/td&gt;&lt;td&gt;Person ID is invalid.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;PersonNotFound&lt;/td&gt;&lt;td&gt;Person is not found.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "PersonGroupNotFound",
        "message": "Person group is not found."
    }
}</doc>
          </representation>
        </response>
        <response status="409">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": ConcurrentOperationConflict,
        "message": "There is a conflict operation on requested resource, please try later."
    }
}</doc>
          </representation>
        </response>
        <response status="429">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 429,
        "message": "Rate limit is exceeded. Try again in 26 seconds."
    }
}</doc>
          </representation>
        </response>
      </method>
    </resource>
    <resource path="/persongroups/{personGroupId}/persons/{personId}/persistedFaces/{persistedFaceId}">
      <doc title="PersonGroup Person - Get Face">Retrieve person face information. The persisted person face is specified by its personGroupId, personId and persistedFaceId.
&lt;h4&gt;Http Method&lt;/h4&gt;
GET</doc>
      <param name="personGroupId" style="template" type="xs:string" required="true">
        <doc>Specifying the person group containing the target person.</doc>
      </param>
      <param name="personId" style="template" type="xs:string" required="true">
        <doc>Specifying the target person that the face belongs to.</doc>
      </param>
      <param name="persistedFaceId" style="template" type="xs:string" required="true">
        <doc>The persistedFaceId of the target persisted face of the person.</doc>
      </param>
      <method name="GET">
        <request />
        <response status="200">
          <doc>
A successful call returns target persisted face's information (persistedFaceId and userData).
&lt;br/&gt;&lt;br/&gt;
JSON fields in response body:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Fields&lt;/th&gt;&lt;th&gt;Type&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;persistedFaceId&lt;/td&gt;&lt;th&gt;String&lt;/th&gt;&lt;td&gt;The persistedFaceId of the target face, which is persisted and will not expire. Different from faceId created by &lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236"&gt;Face - Detect&lt;/a&gt; and will expire in 24 hours after the detection call.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;userData&lt;/td&gt;&lt;th&gt;String&lt;/th&gt;&lt;td&gt;User-provided data attached to the face.&lt;/td&gt;&lt;/tr&gt;

&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "persistedFaceId": "015839fb-fbd9-4f79-ace9-7675fc2f1dd9",
    "userData": "User-provided data attached to the person."
}</doc>
          </representation>
        </response>
        <response status="401">
          <doc>
Error code and message returned in JSON:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Error Code&lt;/th&gt;&lt;th&gt;Error Message Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;Unspecified&lt;/td&gt;&lt;td&gt;Invalid subscription Key or user/plan is blocked.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "Unspecified",
        "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
    }
}</doc>
          </representation>
        </response>
        <response status="403">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 403,
        "message": "Out of call volume quota. Quota will be replenished in 2 days."
    }
}</doc>
          </representation>
        </response>
        <response status="404">
          <doc>
Error code and message returned in JSON:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Error Code&lt;/th&gt;&lt;th&gt;Error Message Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;PersistedFaceNotFound&lt;/td&gt;&lt;td&gt;Face ID is invalid.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;PersistedFaceNotFound&lt;/td&gt;&lt;td&gt;Face is not found.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;PersonGroupNotFound&lt;/td&gt;&lt;td&gt;Person group ID is invalid. Valid format should be a string composed by numbers, English letters in lower case, '-', '_', and no longer than 64 characters.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;PersonGroupNotFound&lt;/td&gt;&lt;td&gt;Person group is not found.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;PersonNotFound&lt;/td&gt;&lt;td&gt;Person ID is invalid.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;PersonNotFound&lt;/td&gt;&lt;td&gt;Person is not found.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "PersonGroupNotFound",
        "message": "Person group is not found."
    }
}</doc>
          </representation>
        </response>
        <response status="409">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": ConcurrentOperationConflict,
        "message": "There is a conflict operation on requested resource, please try later."
    }
}</doc>
          </representation>
        </response>
        <response status="429">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 429,
        "message": "Rate limit is exceeded. Try again in 26 seconds."
    }
}</doc>
          </representation>
        </response>
      </method>
    </resource>
    <resource path="/persongroups/{personGroupId}/persons">
      <doc title="PersonGroup Person - List">List all persons’ information in the specified person group, including personId, name, userData and persistedFaceIds of registered
person faces.
&lt;ul&gt;
    &lt;li&gt;Persons are stored in alphabetical order of personId created in
        &lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523c"&gt;PersonGroup Person - Create&lt;/a&gt;.&lt;/li&gt;
    &lt;li&gt;"start" parameter (string, optional) is a personId value that returned entries have larger ids by string comparison.
        "start" set to empty to indicate return from the first item.&lt;/li&gt;
    &lt;li&gt;"top" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can be returned
        in one call. To fetch more, you can specify "start" with the last returned entry’s personId of the current call.&lt;/li&gt;
&lt;/ul&gt;
For example, total 5 persons with their personId: "personId1", ..., "personId5".
&lt;br /&gt; "start=&amp;top=" will return all 5 persons.
&lt;br /&gt; "start=&amp;top=2" will return "personId1", "personId2".
&lt;br /&gt; "start=personId2&amp;top=3" will return "personId3", "personId4", "personId5".
&lt;h4&gt;Http Method&lt;/h4&gt;
GET</doc>
      <param name="personGroupId" style="template" type="xs:string" required="true">
        <doc>personGroupId of the target person group.</doc>
      </param>
      <method name="GET">
        <request>
          <param name="start" style="query" type="xs:string">
            <doc>List persons from the least personId greater than the "start". It contains no more than 64 characters. Default is empty.</doc>
          </param>
          <param name="top" style="query" type="xs:integer" default="1000">
            <doc>The number of persons to list, ranging in [1, 1000]. Default is 1000.</doc>
            <option value="1000" />
          </param>
        </request>
        <response status="200">
          <doc>
A successful call returns an array of person information that belong to the person group.
&lt;br/&gt;&lt;br/&gt; JSON fields in response body:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Fields&lt;/th&gt;&lt;th&gt;Type&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;personId&lt;/td&gt;&lt;th&gt;String&lt;/th&gt;&lt;td&gt;personId of the person in the person group.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;name&lt;/td&gt;&lt;th&gt;String&lt;/th&gt;&lt;td&gt;Person's display name.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;userData&lt;/td&gt;&lt;th&gt;String&lt;/th&gt;&lt;td&gt;User-provided data attached to the person.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;persistedFaceIds&lt;/td&gt;&lt;th&gt;Array&lt;/th&gt;&lt;td&gt;persistedFaceId array of registered faces of the person.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>[
    {
        "personId": "25985303-c537-4467-b41d-bdb45cd95ca1",
        "name": "Ryan",
        "userData": "User-provided data attached to the person.",
        "persistedFaceIds": [
          "015839fb-fbd9-4f79-ace9-7675fc2f1dd9",
          "fce92aed-d578-4d2e-8114-068f8af4492e",
          "b64d5e15-8257-4af2-b20a-5a750f8940e7"
        ]
    },
    {
        "personId": "2ae4935b-9659-44c3-977f-61fac20d0538",
        "name": "David",
        "userData": "User-provided data attached to the person.",
            "persistedFaceIds": [
            "30ea1073-cc9e-4652-b1e3-d08fb7b95315",
            "fbd2a038-dbff-452c-8e79-2ee81b1aa84e"
        ]
    }
]</doc>
          </representation>
        </response>
        <response status="401">
          <doc>
Error code and message returned in JSON:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Error Code&lt;/th&gt;&lt;th&gt;Error Message Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;Unspecified&lt;/td&gt;&lt;td&gt;Invalid subscription Key or user/plan is blocked.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "Unspecified",
        "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
    }
}</doc>
          </representation>
        </response>
        <response status="403">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 403,
        "message": "Out of call volume quota. Quota will be replenished in 2 days."
    }
}</doc>
          </representation>
        </response>
        <response status="404">
          <doc>
Error code and message returned in JSON:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Error Code&lt;/th&gt;&lt;th&gt;Error Message Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;PersonGroupNotFound&lt;/td&gt;&lt;td&gt;Person group ID is invalid. Valid format should be a string composed by numbers, English letters in lower case, '-', '_', and no longer than 64 characters.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;PersonGroupNotFound&lt;/td&gt;&lt;td&gt;Person group is not found.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "PersonGroupNotFound",
        "message": "Person group is not found."
    }
}</doc>
          </representation>
        </response>
        <response status="409">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": ConcurrentOperationConflict,
        "message": "There is a conflict operation on requested resource, please try later."
    }
}</doc>
          </representation>
        </response>
        <response status="429">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 429,
        "message": "Rate limit is exceeded. Try again in 26 seconds."
    }
}</doc>
          </representation>
        </response>
      </method>
    </resource>
    <resource path="/persongroups/{personGroupId}/persons/{personId}">
      <doc title="PersonGroup Person - Update">Update name or userData of a person.
&lt;h4&gt;Http Method&lt;/h4&gt;
PATCH</doc>
      <param name="personGroupId" style="template" type="xs:string" required="true">
        <doc>Specifying the person group containing the target person.</doc>
      </param>
      <param name="personId" style="template" type="xs:string" required="true">
        <doc>personId of the target person.</doc>
      </param>
      <method name="PATCH">
        <request>
          <doc>
JSON fields in request body:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Fields&lt;/th&gt;&lt;th&gt;Type&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;name&lt;/td&gt;&lt;th&gt;String&lt;/th&gt;&lt;td&gt;Target person's display name. Maximum length is 128.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;userData&lt;/td&gt;&lt;th&gt;String&lt;/th&gt;&lt;td&gt;User-provided data attached to the person. Maximum length is 16KB.&lt;/td&gt;&lt;/tr&gt;

&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "name": "Person1",
    "userData": "user-provided data attached to the person."
}</doc>
          </representation>
        </request>
        <response status="200">
          <doc>A successful call returns an empty response body.</doc>
        </response>
        <response status="400">
          <doc>
Error code and message returned in JSON:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Error Code&lt;/th&gt;&lt;th&gt;Error Message Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;BadArgument&lt;/td&gt;&lt;td&gt;'name' is too long.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;BadArgument&lt;/td&gt;&lt;td&gt;'userData' is too long.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;BadArgument&lt;/td&gt;&lt;td&gt;Bad and unrecognizable JSON body.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "BadArgument",
        "message": "'userData' is too long."
    }
}</doc>
          </representation>
        </response>
        <response status="401">
          <doc>
Error code and message returned in JSON:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Error Code&lt;/th&gt;&lt;th&gt;Error Message Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;Unspecified&lt;/td&gt;&lt;td&gt;Invalid subscription Key or user/plan is blocked.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "Unspecified",
        "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
    }
}</doc>
          </representation>
        </response>
        <response status="403">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 403,
        "message": "Out of call volume quota. Quota will be replenished in 2 days."
    }
}</doc>
          </representation>
        </response>
        <response status="404">
          <doc>
Error code and message returned in JSON:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Error Code&lt;/th&gt;&lt;th&gt;Error Message Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;PersonGroupNotFound&lt;/td&gt;&lt;td&gt;Person group ID is invalid. Valid format should be a string composed by numbers, English letters in lower case, '-', '_', and no longer than 64 characters.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;PersonGroupNotFound&lt;/td&gt;&lt;td&gt;Person group is not found.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;PersonNotFound&lt;/td&gt;&lt;td&gt;Person ID is invalid.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;PersonNotFound&lt;/td&gt;&lt;td&gt;Person is not found.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "PersonGroupNotFound",
        "message": "Person group is not found."
    }
}</doc>
          </representation>
        </response>
        <response status="409">
          <doc>
Error code and message returned in JSON:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Error Code&lt;/th&gt;&lt;th&gt;Error Message Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;PersonGroupTrainingNotFinished&lt;/td&gt;&lt;td&gt;The person group is still under training. Try again after training completed.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;ConcurrentOperationConflict&lt;/td&gt;&lt;td&gt;Concurrent operation conflict on requested resource.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "PersonGroupTrainingNotFinished",
        "message": "Person group is under training."
    }
}</doc>
          </representation>
        </response>
        <response status="415">
          <doc>
Unsupported media type error. Only "application/json" is valid for this API.
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "BadArgument",
        "message": "Invalid Media Type."
    }
}</doc>
          </representation>
        </response>
        <response status="429">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 429,
        "message": "Rate limit is exceeded. Try again in 26 seconds."
    }
}</doc>
          </representation>
        </response>
      </method>
    </resource>
    <resource path="/persongroups/{personGroupId}/persons/{personId}/persistedFaces/{persistedFaceId}">
      <doc title="PersonGroup Person - Update Face">Update a person persisted face's userData field.
&lt;h4&gt;Http Method&lt;/h4&gt;
PATCH</doc>
      <param name="personGroupId" style="template" type="xs:string" required="true">
        <doc>Specifying the person group containing the target person.</doc>
      </param>
      <param name="personId" style="template" type="xs:string" required="true">
        <doc>personId of the target person.</doc>
      </param>
      <param name="persistedFaceId" style="template" type="xs:string" required="true">
        <doc>persistedFaceId of target face, which is persisted and will not expire.</doc>
      </param>
      <method name="PATCH">
        <request>
          <doc>
JSON fields in request body:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Fields&lt;/th&gt;&lt;th&gt;Type&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;userData (optional)&lt;/td&gt;&lt;th&gt;String&lt;/th&gt;&lt;td&gt;Optional. Attach userData to person's persisted face. The size limit is 1KB.&lt;/td&gt;&lt;/tr&gt;

&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "userData": "User-provided data attached to the face."
}</doc>
          </representation>
        </request>
        <response status="200">
          <doc>A successful call returns an empty response body.</doc>
        </response>
        <response status="400">
          <doc>
Error code and message returned in JSON:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Error Code&lt;/th&gt;&lt;th&gt;Error Message Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;BadArgument&lt;/td&gt;&lt;td&gt;'userData' is too long.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;BadArgument&lt;/td&gt;&lt;td&gt;Bad and unrecognizable JSON body.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "BadArgument",
        "message": "'userData' is too long."
    }
}</doc>
          </representation>
        </response>
        <response status="401">
          <doc>
Error code and message returned in JSON:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Error Code&lt;/th&gt;&lt;th&gt;Error Message Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;Unspecified&lt;/td&gt;&lt;td&gt;Invalid subscription Key or user/plan is blocked.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "Unspecified",
        "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
    }
}</doc>
          </representation>
        </response>
        <response status="403">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 403,
        "message": "Out of call volume quota. Quota will be replenished in 2 days."
    }
}</doc>
          </representation>
        </response>
        <response status="404">
          <doc>
Error code and message returned in JSON:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Error Code&lt;/th&gt;&lt;th&gt;Error Message Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;


&lt;tr&gt;&lt;td&gt;PersistedFaceNotFound&lt;/td&gt;&lt;td&gt;Face ID is invalid.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;PersistedFaceNotFound&lt;/td&gt;&lt;td&gt;Face is not found.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;PersonGroupNotFound&lt;/td&gt;&lt;td&gt;Person group ID is invalid. Valid format should be a string composed by numbers, English letters in lower case, '-', '_', and no longer than 64 characters.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;PersonGroupNotFound&lt;/td&gt;&lt;td&gt;Person group is not found.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;PersonNotFound&lt;/td&gt;&lt;td&gt;Person ID is invalid.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;PersonNotFound&lt;/td&gt;&lt;td&gt;Person ID is not found.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "PersonGroupNotFound",
        "message": "Person group is not found."
    }
}</doc>
          </representation>
        </response>
        <response status="409">
          <doc>
Error code and message returned in JSON:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Error Code&lt;/th&gt;&lt;th&gt;Error Message Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;PersonGroupTrainingNotFinished&lt;/td&gt;&lt;td&gt;The person group is still under training. Try again after training completed.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;ConcurrentOperationConflict&lt;/td&gt;&lt;td&gt;Concurrent operation conflict on requested resource.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "PersonGroupTrainingNotFinished",
        "message": "Person group is under training."
    }
}</doc>
          </representation>
        </response>
        <response status="415">
          <doc>
Unsupported media type error. Only "application/json" is valid for this API.
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "BadArgument",
        "message": "Invalid Media Type."
    }
}</doc>
          </representation>
        </response>
        <response status="429">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 429,
        "message": "Rate limit is exceeded. Try again in 26 seconds."
    }
}</doc>
          </representation>
        </response>
      </method>
    </resource>
    <resource path="/persongroups/{personGroupId}">
      <doc title="PersonGroup - Create">Create a new person group with specified personGroupId, name, and user-provided userData.
&lt;br /&gt; A person group is the container of the uploaded person data, including face images and face recognition features.
&lt;br /&gt; After creation, use
&lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523c"&gt;PersonGroup Person - Create&lt;/a&gt; to add persons into the group, and then call
&lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395249"&gt;PersonGroup - Train&lt;/a&gt; to get this group ready for
&lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239"&gt;Face - Identify&lt;/a&gt;.
&lt;br /&gt; The person's face, image, and userData will be stored on server until
&lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523d"&gt;PersonGroup Person - Delete&lt;/a&gt; or
&lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395245"&gt;PersonGroup - Delete&lt;/a&gt; is called.
&lt;br /&gt;
&lt;ul&gt;
    &lt;li&gt;Free-tier subscription quota: 1,000 person groups. Each holds up to 1,000 persons.&lt;/li&gt;
    &lt;li&gt;S0-tier subscription quota: 1,000,000 person groups. Each holds up to 10,000 persons.&lt;/li&gt;
    &lt;li&gt;to handle larger scale face identification problem, please consider using
        &lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/599acdee6ac60f11b48b5a9d"&gt;LargePersonGroup&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Http Method&lt;/h4&gt;
PUT</doc>
      <param name="personGroupId" style="template" type="xs:string" required="true">
        <doc>User-provided personGroupId as a string. The valid characters include numbers, English letters in lower case, '-' and '_'. The maximum length of the personGroupId is 64.</doc>
      </param>
      <method name="PUT">
        <request>
          <doc>
JSON fields in request body:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Fields&lt;/th&gt;&lt;th&gt;Type&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;name&lt;/td&gt;&lt;th&gt;String&lt;/th&gt;&lt;td&gt;Person group display name. The maximum length is 128.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;userData (optional)&lt;/td&gt;&lt;th&gt;String&lt;/th&gt;&lt;td&gt;User-provided data attached to the person group. The size limit is 16KB.&lt;/td&gt;&lt;/tr&gt;

&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "name": "group1",
    "userData": "user-provided data attached to the person group."
}</doc>
          </representation>
        </request>
        <response status="200">
          <doc>
A successful call returns an empty response body.
</doc>
        </response>
        <response status="400">
          <doc>
Error code and message returned in JSON:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Error Code&lt;/th&gt;&lt;th&gt;Error Message Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;BadArgument&lt;/td&gt;&lt;td&gt;'name' is too long.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;BadArgument&lt;/td&gt;&lt;td&gt;'userData' is too long.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;BadArgument&lt;/td&gt;&lt;td&gt;Bad and unrecognizable JSON body.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;BadArgument&lt;/td&gt;&lt;td&gt;Person group ID is invalid. Valid format should be a string composed by numbers, English letters in lower case, '-', '_', and no longer than 64 characters. &lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "BadArgument",
        "message": "'name' is too long."
    }
}</doc>
          </representation>
        </response>
        <response status="401">
          <doc>
Error code and message returned in JSON:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Error Code&lt;/th&gt;&lt;th&gt;Error Message Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;Unspecified&lt;/td&gt;&lt;td&gt;Invalid subscription Key or user/plan is blocked.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "Unspecified",
        "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
    }
}</doc>
          </representation>
        </response>
        <response status="403">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 403,
        "message": "Out of call volume quota. Quota will be replenished in 2 days."
    }
}</doc>
          </representation>
        </response>
        <response status="409">
          <doc>
Error code and message returned in JSON:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Error Code&lt;/th&gt;&lt;th&gt;Error Message Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;PersonGroupExists&lt;/td&gt;&lt;td&gt;Person group already exists.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;ConcurrentOperationConflict&lt;/td&gt;&lt;td&gt;Concurrent operation conflict on requested resource.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "PersonGroupExists",
        "message": "Person group already exists."
    }
}</doc>
          </representation>
        </response>
        <response status="415">
          <doc>
Unsupported media type error. Only "application/json" is valid for this API.
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "BadArgument",
        "message": "Invalid Media Type."
    }
}</doc>
          </representation>
        </response>
        <response status="429">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 429,
        "message": "Rate limit is exceeded. Try again in 26 seconds."
    }
}</doc>
          </representation>
        </response>
      </method>
    </resource>
    <resource path="/persongroups/{personGroupId}">
      <doc title="PersonGroup - Delete">Delete an existing person group with specified personGroupId. Persisted data in this person group will be deleted.
&lt;h4&gt;Http Method&lt;/h4&gt;
DELETE</doc>
      <param name="personGroupId" style="template" type="xs:string" required="true">
        <doc>The personGroupId of the person group to be deleted.</doc>
      </param>
      <method name="DELETE">
        <request />
        <response status="200">
          <doc>A successful call returns an empty response body.</doc>
        </response>
        <response status="401">
          <doc>
Error code and message returned in JSON:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Error Code&lt;/th&gt;&lt;th&gt;Error Message Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;Unspecified&lt;/td&gt;&lt;td&gt;Invalid subscription Key or user/plan is blocked.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "Unspecified",
        "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
    }
}</doc>
          </representation>
        </response>
        <response status="403">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 403,
        "message": "Out of call volume quota. Quota will be replenished in 2 days."
    }
}</doc>
          </representation>
        </response>
        <response status="404">
          <doc>
Error code and message returned in JSON:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Error Code&lt;/th&gt;&lt;th&gt;Error Message Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;PersonGroupNotFound&lt;/td&gt;&lt;td&gt;Person group ID is invalid. Valid format should be a string composed by numbers, English letters in lower case, '-', '_', and no longer than 64 characters.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;PersonGroupNotFound&lt;/td&gt;&lt;td&gt;Person group is not found.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "PersonGroupNotFound",
        "message": "Person group is not found."
    }
}</doc>
          </representation>
        </response>
        <response status="409">
          <doc>
Error code and message returned in JSON:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Error Code&lt;/th&gt;&lt;th&gt;Error Message Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;PersonGroupTrainingNotFinished&lt;/td&gt;&lt;td&gt;The person group is still under training. Try again after training completed.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;ConcurrentOperationConflict&lt;/td&gt;&lt;td&gt;Concurrent operation conflict on requested resource.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "PersonGroupTrainingNotFinished",
        "message": "Person group is under training."
    }
}</doc>
          </representation>
        </response>
        <response status="429">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 429,
        "message": "Rate limit is exceeded. Try again in 26 seconds."
    }
}</doc>
          </representation>
        </response>
      </method>
    </resource>
    <resource path="/persongroups/{personGroupId}">
      <doc title="PersonGroup - Get">Retrieve person group name and userData. To get person information under this personGroup, use
&lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395241"&gt;PersonGroup Person - List&lt;/a&gt;.
&lt;h4&gt;Http Method&lt;/h4&gt;
GET</doc>
      <param name="personGroupId" style="template" type="xs:string" required="true">
        <doc>personGroupId of the target person group.</doc>
      </param>
      <method name="GET">
        <request />
        <response status="200">
          <doc>
A successful call returns the person group's information.
&lt;br/&gt;&lt;br/&gt; JSON fields in response body:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Fields&lt;/th&gt;&lt;th&gt;Type&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;personGroupId&lt;/td&gt;&lt;th&gt;String&lt;/th&gt;&lt;td&gt;Target personGroupId provided in request parameter.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;name&lt;/td&gt;&lt;th&gt;String&lt;/th&gt;&lt;td&gt;Person group's display name.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;userData&lt;/td&gt;&lt;th&gt;String&lt;/th&gt;&lt;td&gt;User-provided data attached to this person group.&lt;/td&gt;&lt;/tr&gt;

&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "personGroupId": "sample_group",
    "name": "group1",
    "userData": "User-provided data attached to the person group."
}</doc>
          </representation>
        </response>
        <response status="401">
          <doc>
Error code and message returned in JSON:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Error Code&lt;/th&gt;&lt;th&gt;Error Message Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;Unspecified&lt;/td&gt;&lt;td&gt;Invalid subscription Key or user/plan is blocked.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "Unspecified",
        "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
    }
}</doc>
          </representation>
        </response>
        <response status="403">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 403,
        "message": "Out of call volume quota. Quota will be replenished in 2 days."
    }
}</doc>
          </representation>
        </response>
        <response status="404">
          <doc>
Error code and message returned in JSON:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Error Code&lt;/th&gt;&lt;th&gt;Error Message Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;PersonGroupNotFound&lt;/td&gt;&lt;td&gt;Person group ID is invalid. Valid format should be a string composed by numbers, English letters in lower case, '-', '_', and no longer than 64 characters.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;PersonGroupNotFound&lt;/td&gt;&lt;td&gt;Person group is not found.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "PersonGroupNotFound",
        "message": "Person group is not found."
    }
}</doc>
          </representation>
        </response>
        <response status="409">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": ConcurrentOperationConflict,
        "message": "There is a conflict operation on requested resource, please try later."
    }
}</doc>
          </representation>
        </response>
        <response status="429">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 429,
        "message": "Rate limit is exceeded. Try again in 26 seconds."
    }
}</doc>
          </representation>
        </response>
      </method>
    </resource>
    <resource path="/persongroups/{personGroupId}/training">
      <doc title="PersonGroup - Get Training Status">To check person group training status completed or still ongoing. PersonGroup Training is an asynchronous operation triggered
by
&lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395249"&gt;PersonGroup - Train&lt;/a&gt; API.
&lt;h4&gt;Http Method&lt;/h4&gt;
GET</doc>
      <param name="personGroupId" style="template" type="xs:string" required="true">
        <doc>personGroupId of target person group.</doc>
      </param>
      <method name="GET">
        <request />
        <response status="200">
          <doc>
A successful call returns the person group's training status.
&lt;br /&gt;&lt;br /&gt; JSON fields in response body:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Fields&lt;/th&gt;&lt;th&gt;Type&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;status&lt;/td&gt;&lt;th&gt;String&lt;/th&gt;&lt;td&gt;Training status: notstarted, running, succeeded, failed. If the training process is waiting to perform, the status is notstarted. If the training is ongoing, the status is running. Status succeed means this person group is ready for &lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239"&gt;Face - Identify&lt;/a&gt;. Status failed is often caused by no person or no persisted face exist in the person group. &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;createdDateTime&lt;/td&gt;&lt;th&gt;String&lt;/th&gt;&lt;td&gt;A combined UTC date and time string that describes person group created time, delimited by the letter &lt;i&gt;T&lt;/i&gt;. E.g. 12/21/2017 12:57:27.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;lastActionDateTime&lt;/td&gt;&lt;th&gt;String&lt;/th&gt;&lt;td&gt;Person group last modify time in the UTC, could be null value when the person group is not successfully trained.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;message&lt;/td&gt;&lt;th&gt;String&lt;/th&gt;&lt;td&gt;Show failure message when training failed (omitted when training succeed).&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "status": "succeeded",
    "createdDateTime": "12/21/2017 12:57:27",
    "lastActionDateTime": "12/21/2017 12:57:30",
    "message": null
}</doc>
          </representation>
        </response>
        <response status="401">
          <doc>
Error code and message returned in JSON:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Error Code&lt;/th&gt;&lt;th&gt;Error Message Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;Unspecified&lt;/td&gt;&lt;td&gt;Invalid subscription Key or user/plan is blocked.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "Unspecified",
        "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
    }
}</doc>
          </representation>
        </response>
        <response status="403">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 403,
        "message": "Out of call volume quota. Quota will be replenished in 2 days."
    }
}</doc>
          </representation>
        </response>
        <response status="404">
          <doc>
Error code and message returned in JSON:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Error Code&lt;/th&gt;&lt;th&gt;Error Message Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;PersonGroupNotFound&lt;/td&gt;&lt;td&gt;Person group ID is invalid. Valid format should be a string composed by numbers, English letters in lower case, '-', '_', and no longer than 64 characters.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;PersonGroupNotFound&lt;/td&gt;&lt;td&gt;Person group is not found.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;PersonGroupNotTrained&lt;/td&gt;&lt;td&gt;Person group has not been trained. This error appears on getting training status of a group which never been trained.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "PersonGroupNotFound",
        "message": "Person group is not found."
    }
}</doc>
          </representation>
        </response>
        <response status="409">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": ConcurrentOperationConflict,
        "message": "There is a conflict operation on requested resource, please try later."
    }
}</doc>
          </representation>
        </response>
        <response status="429">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 429,
        "message": "Rate limit is exceeded. Try again in 26 seconds."
    }
}</doc>
          </representation>
        </response>
      </method>
    </resource>
    <resource path="/persongroups">
      <doc title="PersonGroup - List">List person groups’s pesonGroupId, name, and userData.
&lt;ul&gt;
    &lt;li&gt;Person groups are stored in alphabetical order of personGroupId.&lt;/li&gt;
    &lt;li&gt;"start" parameter (string, optional) is a user-provided personGroupId value that returned entries have larger ids by
        string comparison. "start" set to empty to indicate return from the first item.&lt;/li&gt;
    &lt;li&gt;"top" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can be returned
        in one call. To fetch more, you can specify "start" with the last retuned entry’s Id of the current call.&lt;/li&gt;
&lt;/ul&gt;
For example, total 5 person groups: "group1", ..., "group5".
&lt;br /&gt; "start=&amp;top=" will return all 5 groups.
&lt;br /&gt; "start=&amp;top=2" will return "group1", "group2".
&lt;br /&gt; "start=group2&amp;top=3" will return "group3", "group4", "group5".
&lt;h4&gt;Http Method&lt;/h4&gt;
GET</doc>
      <method name="GET">
        <request>
          <param name="start" style="query" type="xs:string">
            <doc>List person groups from the least personGroupId greater than the "start". It contains no more than 64 characters. Default is empty.</doc>
          </param>
          <param name="top" style="query" type="xs:integer" default="1000">
            <doc>The number of person groups to list, ranging in [1, 1000]. Default is 1000.</doc>
            <option value="1000" />
          </param>
        </request>
        <response status="200">
          <doc>
A successful call returns an array of person groups and their information (personGroupId, name and userData).
&lt;br /&gt;&lt;br /&gt; JSON fields in response body:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Fields&lt;/th&gt;&lt;th&gt;Type&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;personGroupId&lt;/td&gt;&lt;th&gt;String&lt;/th&gt;&lt;td&gt;personGroupId of the existing person groups, created in &lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395244"&gt;PersonGroup - Create&lt;/a&gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;name&lt;/td&gt;&lt;th&gt;String&lt;/th&gt;&lt;td&gt;Person group's display name.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;userData&lt;/td&gt;&lt;th&gt;String&lt;/th&gt;&lt;td&gt;User-provided data attached to this person group.&lt;/td&gt;&lt;/tr&gt;

&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>[
    {
        "personGroupId": "sample_group",
        "name": "group1",
        "userData": "User-provided data attached to the person group."
    },
    {
        "personGroupId": "sample_group2",
        "name": "group2",
        "userData": "User-provided data attached to the person group."
    }
]</doc>
          </representation>
        </response>
        <response status="400">
          <doc>
Error code and message returned in JSON:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Error Code&lt;/th&gt;&lt;th&gt;Error Message Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;BadArgument&lt;/td&gt;&lt;td&gt;Parameter top is invalid. Valid range is [1, 1000].&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 400,
        "message": "Parameter top is invalid."
    }
}
</doc>
          </representation>
        </response>
        <response status="401">
          <doc>
Error code and message returned in JSON:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Error Code&lt;/th&gt;&lt;th&gt;Error Message Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;Unspecified&lt;/td&gt;&lt;td&gt;Invalid subscription Key or user/plan is blocked.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "Unspecified",
        "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
    }
}</doc>
          </representation>
        </response>
        <response status="403">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 403,
        "message": "Out of call volume quota. Quota will be replenished in 2 days."
    }
}</doc>
          </representation>
        </response>
        <response status="409">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": ConcurrentOperationConflict,
        "message": "There is a conflict operation on requested resource, please try later."
    }
}</doc>
          </representation>
        </response>
        <response status="429">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 429,
        "message": "Rate limit is exceeded. Try again in 26 seconds."
    }
}</doc>
          </representation>
        </response>
      </method>
    </resource>
    <resource path="/persongroups/{personGroupId}/train">
      <doc title="PersonGroup - Train">Submit a person group training task. Training is a crucial step that only a trained person group can be used by
&lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239"&gt;Face - Identify&lt;/a&gt;.
&lt;br /&gt;
&lt;br /&gt; The training task is an asynchronous task. Training time depends on the number of person entries, and their faces in a person
group. It could be several seconds to minutes. To check training status, please use
&lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395247"&gt;PersonGroup - Get Training Status&lt;/a&gt;.
&lt;h4&gt;Http Method&lt;/h4&gt;
POST</doc>
      <param name="personGroupId" style="template" type="xs:string" required="true">
        <doc>Target person group to be trained.</doc>
      </param>
      <method name="POST">
        <request />
        <response status="202">
          <doc>
A successful call returns an empty JSON body.
</doc>
        </response>
        <response status="401">
          <doc>
Error code and message returned in JSON:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Error Code&lt;/th&gt;&lt;th&gt;Error Message Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;Unspecified&lt;/td&gt;&lt;td&gt;Invalid subscription Key or user/plan is blocked.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "Unspecified",
        "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
    }
}</doc>
          </representation>
        </response>
        <response status="403">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 403,
        "message": "Out of call volume quota. Quota will be replenished in 2 days."
    }
}</doc>
          </representation>
        </response>
        <response status="404">
          <doc>
Error code and message returned in JSON:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Error Code&lt;/th&gt;&lt;th&gt;Error Message Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;PersonGroupNotFound&lt;/td&gt;&lt;td&gt;Person group ID is invalid. Valid format should be a string composed by numbers, English letters in lower case, '-', '_', and no longer than 64 characters.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;PersonGroupNotFound&lt;/td&gt;&lt;td&gt;Person group is not found.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "PersonGroupNotFound",
        "message": "Person group is not found."
    }
}</doc>
          </representation>
        </response>
        <response status="409">
          <doc>
Error code and message returned in JSON:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Error Code&lt;/th&gt;&lt;th&gt;Error Message Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;PersonGroupTrainingNotFinished&lt;/td&gt;&lt;td&gt;Person group is under training.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;ConcurrentOperationConflict&lt;/td&gt;&lt;td&gt;Concurrent operation conflict on requested resource.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "PersonGroupTrainingNotFinished",
        "message": "Person group is under training."
    }
}</doc>
          </representation>
        </response>
        <response status="429">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 429,
        "message": "Rate limit is exceeded. Try again in 26 seconds."
    }
}</doc>
          </representation>
        </response>
      </method>
    </resource>
    <resource path="/persongroups/{personGroupId}">
      <doc title="PersonGroup - Update">Update an existing person group's name and userData. The properties keep unchanged if they are not in request body.
&lt;h4&gt;Http Method&lt;/h4&gt;
PATCH</doc>
      <param name="personGroupId" style="template" type="xs:string" required="true">
        <doc>personGroupId of the person group to be updated.</doc>
      </param>
      <method name="PATCH">
        <request>
          <doc>
JSON fields in request body:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Fields&lt;/th&gt;&lt;th&gt;Type&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;name&lt;/td&gt;&lt;th&gt;String&lt;/th&gt;&lt;td&gt;Person group display name. The maximum length is 128.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;userData&lt;/td&gt;&lt;th&gt;String&lt;/th&gt;&lt;td&gt;User-provided data attached to the person group. The size limit is 16KB.&lt;/td&gt;&lt;/tr&gt;

&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "name": "group1",
    "userData": "user-provided data attached to the person group."
}</doc>
          </representation>
        </request>
        <response status="200">
          <doc>A successful call returns an empty response body.</doc>
        </response>
        <response status="400">
          <doc>
Error code and message returned in JSON:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Error Code&lt;/th&gt;&lt;th&gt;Error Message Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;BadArgument&lt;/td&gt;&lt;td&gt;'name' is too long.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;BadArgument&lt;/td&gt;&lt;td&gt;'userData' is too long.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;BadArgument&lt;/td&gt;&lt;td&gt;Bad and unrecognizable JSON body.&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "BadArgument",
        "message": "'name' is too long."
    }
}</doc>
          </representation>
        </response>
        <response status="401">
          <doc>
Error code and message returned in JSON:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Error Code&lt;/th&gt;&lt;th&gt;Error Message Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;Unspecified&lt;/td&gt;&lt;td&gt;Invalid subscription Key or user/plan is blocked.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "Unspecified",
        "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
    }
}</doc>
          </representation>
        </response>
        <response status="403">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 403,
        "message": "Out of call volume quota. Quota will be replenished in 2 days."
    }
}
</doc>
          </representation>
        </response>
        <response status="404">
          <doc>
Error code and message returned in JSON:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Error Code&lt;/th&gt;&lt;th&gt;Error Message Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;PersonGroupNotFound&lt;/td&gt;&lt;td&gt;personGroupId is invalid. Valid format should be a string composed by numbers, English letters in lower case, '-', '_', and no longer than 64 characters.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;PersonGroupNotFound&lt;/td&gt;&lt;td&gt;Person group is not found.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "PersonGroupNotFound",
        "message": "Person group is not found."
    }
}</doc>
          </representation>
        </response>
        <response status="409">
          <doc>
Error code and message returned in JSON:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Error Code&lt;/th&gt;&lt;th&gt;Error Message Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;PersonGroupTrainingNotFinished&lt;/td&gt;&lt;td&gt;The person group is still under training. Try again after training completed.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;ConcurrentOperationConflict&lt;/td&gt;&lt;td&gt;Concurrent operation conflict on requested resource.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "PersonGroupTrainingNotFinished",
        "message": "Person group is under training."
    }
}</doc>
          </representation>
        </response>
        <response status="415">
          <doc>
Unsupported media type error. Only "application/json" is valid for this API.
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "BadArgument",
        "message": "Invalid Media Type."
    }
}</doc>
          </representation>
        </response>
        <response status="429">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 429,
        "message": "Rate limit is exceeded. Try again in 26 seconds."
    }
}</doc>
          </representation>
        </response>
      </method>
    </resource>
    <resource path="/facelists/{faceListId}">
      <doc title="FaceList - Create">Create an empty face list with user-specified faceListId, name and an optional userData. Up to 64 face lists are allowed
in one subscription.
&lt;br /&gt; Face list is a list of faces, up to 1,000 faces, and used by
&lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237"&gt;Face - Find Similar&lt;/a&gt;.
&lt;br /&gt; After creation, user should use
&lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395250"&gt;FaceList - Add Face&lt;/a&gt; to import the faces. Faces are stored on server until
&lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039524f"&gt;FaceList - Delete&lt;/a&gt; is called.
&lt;br /&gt; Find Similar is used for scenario like finding celebrity-like faces, similar face filtering, or as a light way face identification.
But if the actual use is to identify person, please use
&lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395244"&gt;PersonGroup&lt;/a&gt; /
&lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/599acdee6ac60f11b48b5a9d"&gt;LargePersonGroup&lt;/a&gt; and
&lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239"&gt;Face - Identify&lt;/a&gt;.
&lt;br /&gt; Please consider
&lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/5a157b68d2de3616c086f2cc"&gt;LargeFaceList&lt;/a&gt; when the face number is large. It can support up to 1,000,000 faces.
&lt;h4&gt;Http Method&lt;/h4&gt;
PUT</doc>
      <param name="faceListId" style="template" type="xs:string" required="true">
        <doc>Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.</doc>
      </param>
      <method name="PUT">
        <request>
          <doc>
JSON fields in request body:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Fields&lt;/th&gt;&lt;th&gt;Type&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;name&lt;/td&gt;&lt;th&gt;String&lt;/th&gt;&lt;td&gt;Name of the created face list, maximum length is 128.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;userData (optional)&lt;/td&gt;&lt;th&gt;String&lt;/th&gt;&lt;td&gt;Optional user defined data for the face list. Length should not exceed 16KB.&lt;/td&gt;&lt;/tr&gt;

&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "name": "sample_list",
    "userData": "User-provided data attached to the face list."
}</doc>
          </representation>
        </request>
        <response status="200">
          <doc>A successful call returns an empty response body.</doc>
        </response>
        <response status="400">
          <doc>
Error code and message returned in JSON:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Error Code&lt;/th&gt;&lt;th&gt;Error Message Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;BadArgument&lt;/td&gt;&lt;td&gt;'name' is too long.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;BadArgument&lt;/td&gt;&lt;td&gt;'userData' is too long.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;BadArgument&lt;/td&gt;&lt;td&gt;Bad and unrecognizable JSON body.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;BadArgument&lt;/td&gt;&lt;td&gt;Face list ID is invalid. Valid format should be a string composed by numbers, English letters in lower case, '-', '_', and no longer than 64 characters.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "BadArgument",
        "message": "'name' is too long."
    }
}</doc>
          </representation>
        </response>
        <response status="401">
          <doc>
Error code and message returned in JSON:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Error Code&lt;/th&gt;&lt;th&gt;Error Message Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;Unspecified&lt;/td&gt;&lt;td&gt;Invalid subscription Key or user/plan is blocked.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "Unspecified",
        "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
    }
}</doc>
          </representation>
        </response>
        <response status="403">
          <doc>Face list number reached limit, maximum is 64.</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "QuotaExceeded",
        "message": "Face list number reached limit."
    }
}</doc>
          </representation>
        </response>
        <response status="409">
          <doc>
Error code and message returned in JSON:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Error Code&lt;/th&gt;&lt;th&gt;Error Message Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;FaceListExists&lt;/td&gt;&lt;td&gt;Face list already exists.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;ConcurrentOperationConflict&lt;/td&gt;&lt;td&gt;Concurrent operation conflict on requested resource.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "FaceListExists",
        "message": "Face list already exists."
    }
}</doc>
          </representation>
        </response>
        <response status="415">
          <doc>
Unsupported media type error. Only "application/json" is valid for this API.
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "BadArgument",
        "message": "Invalid Media Type."
    }
}</doc>
          </representation>
        </response>
        <response status="429">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 429,
        "message": "Rate limit is exceeded. Try again in 26 seconds."
    }
}</doc>
          </representation>
        </response>
      </method>
    </resource>
    <resource path="/facelists/{faceListId}">
      <doc title="FaceList - Get">Retrieve a face list’s faceListId, name, userData and faces in the face list.
&lt;h4&gt;Http Method&lt;/h4&gt;
GET</doc>
      <param name="faceListId" style="template" type="xs:string" required="true">
        <doc>Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.</doc>
      </param>
      <method name="GET">
        <request />
        <response status="200">
          <doc>
A successful call returns the face list's information.
&lt;br/&gt;&lt;br/&gt; JSON fields in response body:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Fields&lt;/th&gt;&lt;th&gt;Type&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;faceListId&lt;/td&gt;&lt;th&gt;String&lt;/th&gt;&lt;td&gt;faceListId of the target face list.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;name&lt;/td&gt;&lt;th&gt;String&lt;/th&gt;&lt;td&gt;Face list's display name.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;userData&lt;/td&gt;&lt;th&gt;String&lt;/th&gt;&lt;td&gt;User-provided data attached to this face list.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;persistedFaces&lt;/td&gt;&lt;th&gt;Array&lt;/th&gt;&lt;td&gt;Faces in the face list.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "faceListId": "sample_list",
    "name": "list1",
    "userData": "User-provided data attached to the face list.",
    "persistedFaces": [
       {
          "persistedFaceId": "B8D802CF-DD8F-4E61-B15C-9E6C5844CCBD",
          "userData": "User-provided data attached to the face."
       },
       …
    ]
}</doc>
          </representation>
        </response>
        <response status="401">
          <doc>
Error code and message returned in JSON:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Error Code&lt;/th&gt;&lt;th&gt;Error Message Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;Unspecified&lt;/td&gt;&lt;td&gt;Invalid subscription Key or user/plan is blocked.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "Unspecified",
        "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
    }
}</doc>
          </representation>
        </response>
        <response status="403">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 403,
        "message": "Out of call volume quota. Quota will be replenished in 2 days."
    }
}</doc>
          </representation>
        </response>
        <response status="404">
          <doc>
Error code and message returned in JSON:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Error Code&lt;/th&gt;&lt;th&gt;Error Message Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;PersistedFaceListNotFound&lt;/td&gt;&lt;td&gt;Persisted face list ID is invalid.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;PersistedFaceListNotFound&lt;/td&gt;&lt;td&gt;Persisted face list is not found.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "FaceListNotFound",
        "message": "Face list is not found."
    }
}</doc>
          </representation>
        </response>
        <response status="409">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": ConcurrentOperationConflict,
        "message": "There is a conflict operation on requested resource, please try later."
    }
}</doc>
          </representation>
        </response>
        <response status="429">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 429,
        "message": "Rate limit is exceeded. Try again in 26 seconds."
    }
}</doc>
          </representation>
        </response>
      </method>
    </resource>
    <resource path="/facelists">
      <doc title="FaceList - List">List face lists’ faceListId, name and userData.
&lt;br /&gt; To get face information inside faceList use
&lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039524c"&gt;FaceList - Get&lt;/a&gt;.
&lt;h4&gt;Http Method&lt;/h4&gt;
GET</doc>
      <method name="GET">
        <request />
        <response status="200">
          <doc>
A successful call returns an array of faceList.
&lt;br /&gt;&lt;br /&gt; JSON fields in response body:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Fields&lt;/th&gt;&lt;th&gt;Type&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;faceListId&lt;/td&gt;&lt;th&gt;String&lt;/th&gt;&lt;td&gt;Face list ID&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;name&lt;/td&gt;&lt;th&gt;String&lt;/th&gt;&lt;td&gt;Face list name which user assigned&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;userData&lt;/td&gt;&lt;th&gt;String&lt;/th&gt;&lt;td&gt;User-provided data attached to the face list&lt;/td&gt;&lt;/tr&gt;

&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>[
   {
       "faceListId": "sample_list",
       "name": "list1",
       "userData": "User-provided data attached to the face list."
    },
    …
]</doc>
          </representation>
        </response>
        <response status="401">
          <doc>
Error code and message returned in JSON:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Error Code&lt;/th&gt;&lt;th&gt;Error Message Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;Unspecified&lt;/td&gt;&lt;td&gt;Invalid subscription Key or user/plan is blocked.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "Unspecified",
        "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
    }
}</doc>
          </representation>
        </response>
        <response status="403">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 403,
        "message": "Out of call volume quota. Quota will be replenished in 2 days."
    }
}</doc>
          </representation>
        </response>
        <response status="429">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 429,
        "message": "Rate limit is exceeded. Try again in 26 seconds."
    }
}</doc>
          </representation>
        </response>
      </method>
    </resource>
    <resource path="/facelists/{faceListId}">
      <doc title="FaceList - Update">Update information of a face list, including name and userData.
&lt;h4&gt;Http Method&lt;/h4&gt;
PATCH</doc>
      <param name="faceListId" style="template" type="xs:string" required="true">
        <doc>Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.</doc>
      </param>
      <method name="PATCH">
        <request>
          <doc>
JSON fields in request body:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Fields&lt;/th&gt;&lt;th&gt;Type&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;name&lt;/td&gt;&lt;th&gt;String&lt;/th&gt;&lt;td&gt;Name of the face list, maximum length is 128&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;userData (optional)&lt;/td&gt;&lt;th&gt;String&lt;/th&gt;&lt;td&gt;Optional user defined data for the face list. Length should not exceed 16KB&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "name": "list1",
    "userData": "User-provided data attached to the face list."
}</doc>
          </representation>
        </request>
        <response status="200">
          <doc>A successful call returns an empty response body.</doc>
        </response>
        <response status="400">
          <doc>
Error code and message returned in JSON:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Error Code&lt;/th&gt;&lt;th&gt;Error Message Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;BadArgument&lt;/td&gt;&lt;td&gt;'name' is too long.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;BadArgument&lt;/td&gt;&lt;td&gt;'userData' is too long.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;BadArgument&lt;/td&gt;&lt;td&gt;Bad and unrecognizable JSON body.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "BadArgument",
        "message": "'name' is too long."
    }
}</doc>
          </representation>
        </response>
        <response status="401">
          <doc>
Error code and message returned in JSON:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Error Code&lt;/th&gt;&lt;th&gt;Error Message Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;Unspecified&lt;/td&gt;&lt;td&gt;Invalid subscription Key or user/plan is blocked.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "Unspecified",
        "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
    }
}</doc>
          </representation>
        </response>
        <response status="403">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 403,
        "message": "Out of call volume quota. Quota will be replenished in 2 days."
    }
}</doc>
          </representation>
        </response>
        <response status="404">
          <doc>
Error code and message returned in JSON:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Error Code&lt;/th&gt;&lt;th&gt;Error Message Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;FaceListNotFound&lt;/td&gt;&lt;td&gt;Face list is not found.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;FaceListNotFound&lt;/td&gt;&lt;td&gt;Face list ID is invalid. Valid format should be a string composed by numbers, English letters in lower case, '-' and '_'. and no longer than 64 characters.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "PersistedFaceListNotFound",
        "message": "Face list is not found."
    }
}</doc>
          </representation>
        </response>
        <response status="409">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": ConcurrentOperationConflict,
        "message": "There is a conflict operation on requested resource, please try later."
    }
}</doc>
          </representation>
        </response>
        <response status="415">
          <doc>
Unsupported media type error. Only "application/json" is valid for this API.
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "BadArgument",
        "message": "Invalid Media Type."
    }
}</doc>
          </representation>
        </response>
        <response status="429">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 429,
        "message": "Rate limit is exceeded. Try again in 26 seconds."
    }
}</doc>
          </representation>
        </response>
      </method>
    </resource>
    <resource path="/facelists/{faceListId}">
      <doc title="FaceList - Delete">Delete a specified face list. The related face images in the face list will be deleted, too.
&lt;h4&gt;Http Method&lt;/h4&gt;
DELETE</doc>
      <param name="faceListId" style="template" type="xs:string" required="true">
        <doc>Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.</doc>
      </param>
      <method name="DELETE">
        <request />
        <response status="200">
          <doc>A successful call returns an empty response body.</doc>
        </response>
        <response status="401">
          <doc>
Error code and message returned in JSON:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Error Code&lt;/th&gt;&lt;th&gt;Error Message Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;Unspecified&lt;/td&gt;&lt;td&gt;Invalid subscription Key or user/plan is blocked.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "Unspecified",
        "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
    }
}</doc>
          </representation>
        </response>
        <response status="403">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 403,
        "message": "Out of call volume quota. Quota will be replenished in 2 days."
    }
}</doc>
          </representation>
        </response>
        <response status="404">
          <doc>
Error code and message returned in JSON:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Error Code&lt;/th&gt;&lt;th&gt;Error Message Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;FaceListNotFound&lt;/td&gt;&lt;td&gt;Face list is not found.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;FaceListNotFound&lt;/td&gt;&lt;td&gt;Face list ID is invalid. Valid format should be a string composed by numbers, English letters in lower case, '-', '_', and no longer than 64 characters.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "FaceListNotFound",
        "message": "Face list is not found."
    }
}</doc>
          </representation>
        </response>
        <response status="409">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": ConcurrentOperationConflict,
        "message": "There is a conflict operation on requested resource, please try later."
    }
}</doc>
          </representation>
        </response>
        <response status="429">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 429,
        "message": "Rate limit is exceeded. Try again in 26 seconds."
    }
}</doc>
          </representation>
        </response>
      </method>
    </resource>
    <resource path="/facelists/{faceListId}/persistedFaces">
      <doc title="FaceList - Add Face">Add a face to a specified face list, up to 1,000 faces.
&lt;br /&gt; To deal with the image of multiple faces, input face can be specified as an image with a targetFace rectangle. It returns
a persistedFaceId representing the added face. The face image and related info will be stored on server until
&lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395251"&gt;FaceList - Delete Face&lt;/a&gt; or
&lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039524f"&gt;FaceList - Delete&lt;/a&gt; is called.
&lt;br /&gt; Note persistedFaceId is different from faceId generated by
&lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236"&gt;Face - Detect&lt;/a&gt;.
&lt;ul&gt;
    &lt;li&gt;JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 4MB.&lt;/li&gt;
    &lt;li&gt;"targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the provided
        "targetFace" rectangle is not returned from
        &lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236"&gt;Face - Detect&lt;/a&gt;, there’s no guarantee to detect and add the face successfully.&lt;/li&gt;
    &lt;li&gt;Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause failures.&lt;/li&gt;
    &lt;li&gt;Adding/deleting faces to/from a same face list are processed sequentially and to/from different face lists are in parallel.&lt;/li&gt;
&lt;/ul&gt;</doc>
      <param name="faceListId" style="template" type="xs:string" required="true">
        <doc>Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.</doc>
      </param>
      <method name="POST">
        <request>
          <doc>JSON fields in request body:
&lt;table class="element table"&gt;
	&lt;thead&gt;
		&lt;tr&gt;
			&lt;th&gt;Fields&lt;/th&gt;
			&lt;th&gt;Type&lt;/th&gt;
			&lt;th&gt;Description&lt;/th&gt;
		&lt;/tr&gt;
	&lt;/thead&gt;
	&lt;tbody&gt;
		&lt;tr&gt;
			&lt;td&gt;url&lt;/td&gt;
			&lt;th&gt;String&lt;/th&gt;
			&lt;td&gt;Image url. Image file size should be between 1KB and 4MB. Only one face is allowed per image.&lt;/td&gt;
		&lt;/tr&gt;
	&lt;/tbody&gt;
&lt;/table&gt;</doc>
          <param name="userData" style="query" type="xs:string">
            <doc>User-specified data about the face list for any purpose. The maximum length is 1KB.</doc>
          </param>
          <param name="targetFace" style="query" type="xs:string">
            <doc>A face rectangle to specify the target face to be added into the face list, in the format of "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If there is more than one face in the image, targetFace is required to specify which face to add. No targetFace means there is only one face detected in the entire image.</doc>
          </param>
          <representation mediaType="application/json">
            <doc>{
    "url": "http://example.com/1.jpg"
}</doc>
          </representation>
          <representation mediaType="application/octet-stream">
            <doc>[binary data]</doc>
          </representation>
        </request>
        <response status="200">
          <doc>
A successful call returns a new persistedFaceId.
&lt;br/&gt;&lt;br/&gt; JSON fields in response body:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Fields&lt;/th&gt;&lt;th&gt;Type&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;persistedFaceId&lt;/td&gt;&lt;th&gt;String&lt;/th&gt;&lt;td&gt;persistedFaceId of the added face, which is persisted and will not expire. Different from faceId which is created in &lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236"&gt;Face - Detect&lt;/a&gt; and will expire in 24 hours after the detection call.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "persistedFaceId": "B8D802CF-DD8F-4E61-B15C-9E6C5844CCBA"
}</doc>
          </representation>
        </response>
        <response status="400">
          <doc>Error code and message returned in JSON:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Error Code&lt;/th&gt;&lt;th&gt;Error Message Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;BadArgument&lt;/td&gt;&lt;td&gt;Bad and unrecognizable JSON body.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;BadArgument&lt;/td&gt;&lt;td&gt;'userData' is too long.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;BadArgument&lt;/td&gt;&lt;td&gt;Argument targetFace out of range, targetFace is valid but it's intersection with the entire image is empty.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;BadArgument&lt;/td&gt;&lt;td&gt;Invalid argument targetFace. Caused by invalid string format or invalid left/top/height/width value. &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;InvalidURL&lt;/td&gt;&lt;td&gt;Invalid image URL.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;InvalidURL&lt;/td&gt;&lt;td&gt;Failed to download from target server. Remote server error returned.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;InvalidImage&lt;/td&gt;&lt;td&gt;There is more than 1 face in the image or in the specified targetFace area. &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;InvalidImage&lt;/td&gt;&lt;td&gt;No face detected in the image or in the specified targetFace area.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;InvalidImage&lt;/td&gt;&lt;td&gt;Decoding error, image format unsupported.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;InvalidImageSize&lt;/td&gt;&lt;td&gt;Image size is too small.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;InvalidImageSize&lt;/td&gt;&lt;td&gt;Image size is too big.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "BadArgument",
        "message": "JSON parsing error."
    }
}</doc>
          </representation>
        </response>
        <response status="401">
          <doc>
Error code and message returned in JSON:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Error Code&lt;/th&gt;&lt;th&gt;Error Message Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;Unspecified&lt;/td&gt;&lt;td&gt;Invalid subscription Key or user/plan is blocked.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "Unspecified",
        "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
    }
}</doc>
          </representation>
        </response>
        <response status="403">
          <doc>
Persisted face number reached limit, maximum is 1000 per face list.
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "QuotaExceeded",
        "message": "Face number reached limit."
    }
}</doc>
          </representation>
        </response>
        <response status="404">
          <doc>
Error code and message returned in JSON:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Error Code&lt;/th&gt;&lt;th&gt;Error Message Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;FaceListNotFound&lt;/td&gt;&lt;td&gt;Face list is not found.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;FaceListNotFound&lt;/td&gt;&lt;td&gt;Face list ID is invalid. Valid format should be a string composed by numbers, English letters in lower case, '-', '_', and no longer than 64 characters.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "FaceListNotFound",
        "message": "Face list is not found."
    }
}</doc>
          </representation>
        </response>
        <response status="408">
          <doc>
Operation exceeds maximum execution time.
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "OperationTimeOut",
        "message": "Request Timeout."
    }
}</doc>
          </representation>
        </response>
        <response status="409">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": ConcurrentOperationConflict,
        "message": "There is a conflict operation on requested resource, please try later."
    }
}</doc>
          </representation>
        </response>
        <response status="415">
          <doc>Unsupported media type error. Content-Type is not in the allowed types:
&lt;br/&gt;
&lt;ol&gt;
	&lt;li&gt;For an image URL, Content-Type should be application/json.&lt;/li&gt;
	&lt;li&gt;For a local image, Content-Type should be application/octet-stream.&lt;/li&gt;
&lt;/ol&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "BadArgument",
        "message": "Invalid Media Type."
    }
}</doc>
          </representation>
        </response>
        <response status="429">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 429,
        "message": "Rate limit is exceeded. Try again in 26 seconds."
    }
}</doc>
          </representation>
        </response>
      </method>
    </resource>
    <resource path="/facelists/{faceListId}/persistedFaces/{persistedFaceId}">
      <doc title="FaceList - Delete Face">Delete a face from a face list by specified faceListId and persisitedFaceId. The related face image will be deleted, too.
&lt;br /&gt; Adding/deleting faces to/from a same face list are processed sequentially and to/from different face lists are in parallel.
&lt;h4&gt;Http Method&lt;/h4&gt;
DELETE</doc>
      <param name="faceListId" style="template" type="xs:string" required="true">
        <doc>faceListId of an existing face list. Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.</doc>
      </param>
      <param name="persistedFaceId" style="template" type="xs:string" required="true">
        <doc>persistedFaceId of an existing face. Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.</doc>
      </param>
      <method name="DELETE">
        <request />
        <response status="200">
          <doc>A successful call returns an empty response body.</doc>
        </response>
        <response status="401">
          <doc>
Error code and message returned in JSON:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Error Code&lt;/th&gt;&lt;th&gt;Error Message Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;Unspecified&lt;/td&gt;&lt;td&gt;Invalid subscription Key or user/plan is blocked.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "Unspecified",
        "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
    }
}</doc>
          </representation>
        </response>
        <response status="403">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 403,
        "message": "Out of call volume quota. Quota will be replenished in 2 days."
    }
}</doc>
          </representation>
        </response>
        <response status="404">
          <doc>
Error code and message returned in JSON:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Error Code&lt;/th&gt;&lt;th&gt;Error Message Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;FaceListNotFound&lt;/td&gt;&lt;td&gt;Face list is not found.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;FaceListNotFound&lt;/td&gt;&lt;td&gt;Face list ID is invalid. Valid format should be a string composed by numbers, English letters in lower case, '-', '_', and no longer than 64 characters.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;PersistedFaceNotFound&lt;/td&gt;&lt;td&gt;Persisted face is not found.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;PersistedFaceNotFound&lt;/td&gt;&lt;td&gt;Persisted face ID is invalid.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "FaceListNotFound",
        "message": "Face list is not found."
    }
}</doc>
          </representation>
        </response>
        <response status="409">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": ConcurrentOperationConflict,
        "message": "There is a conflict operation on requested resource, please try later."
    }
}</doc>
          </representation>
        </response>
        <response status="429">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 429,
        "message": "Rate limit is exceeded. Try again in 26 seconds."
    }
}</doc>
          </representation>
        </response>
      </method>
    </resource>
    <resource path="/largepersongroups/{largePersonGroupId}">
      <doc title="LargePersonGroup - Create">Create a new large person group with user-specified largePersonGroupId, name, and optional userData.
&lt;br /&gt; A large person group is the container of the uploaded person data, including face images and face recognition feature, and up to 1,000,000
people.
&lt;br /&gt; After creation, use
&lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/599adcba3a7b9412a4d53f40"&gt;LargePersonGroup Person - Create&lt;/a&gt; to add person into the group, and call
&lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/599ae2d16ac60f11b48b5aa4"&gt;LargePersonGroup - Train&lt;/a&gt; to get this group ready for
&lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239"&gt;Face - Identify&lt;/a&gt;.
&lt;br /&gt; The person face, image, and userData will be stored on server until
&lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/599ade5c6ac60f11b48b5aa2"&gt;LargePersonGroup Person - Delete&lt;/a&gt; or
&lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/599adc216ac60f11b48b5a9f"&gt;LargePersonGroup - Delete&lt;/a&gt; is called.
&lt;br /&gt;
&lt;ul&gt;
    &lt;li&gt;Free-tier subscription quota: 1,000 large person groups.&lt;/li&gt;
    &lt;li&gt;S0-tier subscription quota: 1,000,000 large person groups.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Http Method&lt;/h4&gt;
PUT</doc>
      <param name="largePersonGroupId" style="template" type="xs:string" required="true">
        <doc>User-provided largePersonGroupId as a string. The valid characters include numbers, English letters in lower case, '-' and '_'. The maximum length of the largePersonGroupId is 64.</doc>
      </param>
      <method name="PUT">
        <request>
          <doc>JSON fields in request body:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Fields&lt;/th&gt;
            &lt;th&gt;Type&lt;/th&gt;
            &lt;th&gt;Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;name&lt;/td&gt;
            &lt;th&gt;String&lt;/th&gt;
            &lt;td&gt;Name of the created large person group, maximum length is 128.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;userData (optional)&lt;/td&gt;
            &lt;th&gt;String&lt;/th&gt;
            &lt;td&gt;Optional user defined data for the large person group. Length should not exceed 16KB.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "name": "large-person-group-name",
    "userData": "User-provided data attached to the large person group."
}</doc>
          </representation>
        </request>
        <response status="200">
          <doc>A successful call returns an empty response body.</doc>
        </response>
        <response status="400">
          <doc>Error code and message returned in JSON:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Error Code&lt;/th&gt;
            &lt;th&gt;Error Message Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;BadArgument&lt;/td&gt;
            &lt;td&gt;Large person group ID is invalid.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;BadArgument&lt;/td&gt;
            &lt;td&gt;'name' is empty.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;BadArgument&lt;/td&gt;
            &lt;td&gt;'name' is too long.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;BadArgument&lt;/td&gt;
            &lt;td&gt;'userData' is too long.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;BadArgument&lt;/td&gt;
            &lt;td&gt;JSON parsing error.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "BadArgument",
        "message": "'name' is too long."
    }
}</doc>
          </representation>
        </response>
        <response status="401">
          <doc>Error code and message returned in JSON:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Error Code&lt;/th&gt;
            &lt;th&gt;Error Message Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;Unspecified&lt;/td&gt;
            &lt;td&gt;Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "Unspecified",
        "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
    }
}</doc>
          </representation>
        </response>
        <response status="403">
          <doc>Large person group number reached maximum limit.</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "QuotaExceeded",
        "message": "Large person group number reached subscription level limit."
    }
}</doc>
          </representation>
        </response>
        <response status="409">
          <doc>Error code and message returned in JSON:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Error Code&lt;/th&gt;
            &lt;th&gt;Error Message Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;LargePersonGroupExists&lt;/td&gt;
            &lt;td&gt;Large person group already exists.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "LargePersonGroupExists",
        "message": "Large person group already exists."
    }
}</doc>
          </representation>
        </response>
        <response status="415">
          <doc>Unsupported media type error. Only "application/json" is valid for this API.</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "BadArgument",
        "message": "Invalid Media Type."
    }
}</doc>
          </representation>
        </response>
        <response status="429">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 429,
        "message": "Rate limit is exceeded. Try again in 26 seconds."
    }
}</doc>
          </representation>
        </response>
      </method>
    </resource>
    <resource path="/largepersongroups/{largePersonGroupId}">
      <doc title="LargePersonGroup - Get">Retrieve the information of a large person group, including its name and userData. This API returns large person group information
only, use
&lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/599adda06ac60f11b48b5aa1"&gt;LargePersonGroup Person - List&lt;/a&gt; instead to retrieve person information under the large person group.
&lt;h4&gt;Http Method&lt;/h4&gt; GET</doc>
      <param name="largePersonGroupId" style="template" type="xs:string" required="true">
        <doc>largePersonGroupId of the target large person group.</doc>
      </param>
      <method name="GET">
        <request />
        <response status="200">
          <doc>A successful call returns the large person group's information.
&lt;br/&gt;
&lt;br/&gt;
JSON fields in response body:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Fields&lt;/th&gt;
            &lt;th&gt;Type&lt;/th&gt;
            &lt;th&gt;Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;largePersonGroupId&lt;/td&gt;
            &lt;th&gt;String&lt;/th&gt;
            &lt;td&gt;largePersonGroupId of the target large person group.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;name&lt;/td&gt;
            &lt;th&gt;String&lt;/th&gt;
            &lt;td&gt;Large person group's display name.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;userData&lt;/td&gt;
            &lt;th&gt;String&lt;/th&gt;
            &lt;td&gt;User-provided data attached to this large person group.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "largePersonGroupId": "d408cb4e-2f5f-4b4d-b99e-f0b72870e5b5",
    "name": "large-person-group-name",
    "userData": "User-provided data attached to the large person group."
}</doc>
          </representation>
        </response>
        <response status="401">
          <doc>Error code and message returned in JSON:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Error Code&lt;/th&gt;
            &lt;th&gt;Error Message Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;Unspecified&lt;/td&gt;
            &lt;td&gt;Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "Unspecified",
        "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
    }
}</doc>
          </representation>
        </response>
        <response status="403">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 403,
        "message": "Out of call volume quota. Quota will be replenished in 2 days."
    }
}</doc>
          </representation>
        </response>
        <response status="404">
          <doc>Error code and message returned in JSON:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Error Code&lt;/th&gt;
            &lt;th&gt;Error Message Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;LargePersonGroupNotFound&lt;/td&gt;
            &lt;td&gt;Large person group is not found.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;LargePersonGroupNotFound&lt;/td&gt;
            &lt;td&gt;Large person group ID is invalid.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "LargePersonGroupNotFound",
        "message": "Large person group is not found."
    }
}</doc>
          </representation>
        </response>
        <response status="429">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 429,
        "message": "Rate limit is exceeded. Try again in 26 seconds."
    }
}</doc>
          </representation>
        </response>
      </method>
    </resource>
    <resource path="/largepersongroups">
      <doc title="LargePersonGroup - List">List all existing large person groups’s largePesonGroupId, name, and userData.
&lt;ul&gt;
    &lt;li&gt;Large person groups are stored in alphabetical order of largePersonGroupId.&lt;/li&gt;
    &lt;li&gt;"start" parameter (string, optional) is a user-provided largePersonGroupId value that returned entries have larger ids
        by string comparison. "start" set to empty to indicate return from the first item.&lt;/li&gt;
    &lt;li&gt;"top" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can be returned
        in one call. To fetch more, you can specify "start" with the last retuned entry’s Id of the current call.&lt;/li&gt;
&lt;/ul&gt;
For example, total 5 large person groups: "group1", ..., "group5".
&lt;br /&gt; "start=&amp;top=" will return all 5 groups.
&lt;br /&gt; "start=&amp;top=2" will return "group1", "group2".
&lt;br /&gt; "start=group2&amp;top=3" will return "group3", "group4", "group5".
&lt;h4&gt;Http Method&lt;/h4&gt;
GET</doc>
      <method name="GET">
        <request>
          <param name="start" style="query" type="xs:string">
            <doc>List large person groups from the least largePersonGroupId greater than the "start". It contains no more than 64 characters. Default is empty.</doc>
          </param>
          <param name="top" style="query" type="xs:integer" default="1000">
            <doc>The number of large person groups to list, ranging in [1, 1000]. Default is 1000.</doc>
            <option value="1000" />
          </param>
        </request>
        <response status="200">
          <doc>A successful call returns an array of large person groups and their information (largePersonGroupId, name and userData).
&lt;br /&gt;
&lt;br /&gt;
JSON fields in response body:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Fields&lt;/th&gt;
            &lt;th&gt;Type&lt;/th&gt;
            &lt;th&gt;Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;largePersonGroupId&lt;/td&gt;
            &lt;th&gt;String&lt;/th&gt;
            &lt;td&gt;largePersonGroupId of the existing large person groups, created in &lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/5a157b68d2de3616c086f2cc"&gt;LargeFaceList - Create&lt;/a&gt;.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;name&lt;/td&gt;
            &lt;th&gt;String&lt;/th&gt;
            &lt;td&gt;Large person group's display name.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;userData&lt;/td&gt;
            &lt;th&gt;String&lt;/th&gt;
            &lt;td&gt;User-provided data attached to this large person group.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>[
    {
        "largePersonGroupId": "f92f6f1b-3258-4444-8fa2-c2df505cc7ac",
        "name": "large-person-group-name1",
        "userData": "User-provided data attached to the large person group."
    },
    {
        "largePersonGroupId": "c76f7f13-0ed3-4d00-8a3e-2ad3d78f6c37",
        "name": "large-person-group-name2",
        "userData": "User-provided data attached to the large person group."
    }
]</doc>
          </representation>
        </response>
        <response status="400">
          <doc>Error code and message returned in JSON:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Error Code&lt;/th&gt;
            &lt;th&gt;Error Message Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;BadArgument&lt;/td&gt;
            &lt;td&gt;'start' is too long.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;BadArgument&lt;/td&gt;
            &lt;td&gt;'top' is invalid.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "BadArgument",
        "message": "'top' is invalid."
    }
}</doc>
          </representation>
        </response>
        <response status="401">
          <doc>Error code and message returned in JSON:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Error Code&lt;/th&gt;
            &lt;th&gt;Error Message Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;Unspecified&lt;/td&gt;
            &lt;td&gt;Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "Unspecified",
        "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
    }
}</doc>
          </representation>
        </response>
        <response status="403">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "QuotaExceeded",
        "message": "Large Face List number reached limit."
    }
}</doc>
          </representation>
        </response>
        <response status="429">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 429,
        "message": "Rate limit is exceeded. Try again in 26 seconds."
    }
}</doc>
          </representation>
        </response>
      </method>
    </resource>
    <resource path="/largepersongroups/{largePersonGroupId}">
      <doc title="LargePersonGroup - Update">Update an existing large person group's name and userData. The properties keep unchanged if they are not in request body.
&lt;h4&gt;Http Method&lt;/h4&gt;
PATCH</doc>
      <param name="largePersonGroupId" style="template" type="xs:string" required="true">
        <doc>largePersonGroupId of the target large person group.</doc>
      </param>
      <method name="PATCH">
        <request>
          <doc>JSON fields in request body:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Fields&lt;/th&gt;
            &lt;th&gt;Type&lt;/th&gt;
            &lt;th&gt;Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;name&lt;/td&gt;
            &lt;th&gt;String&lt;/th&gt;
            &lt;td&gt;Name of the created large person group, maximum length is 128.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;userData (optional)&lt;/td&gt;
            &lt;th&gt;String&lt;/th&gt;
            &lt;td&gt;Optional user defined data for the large person group. Length should not exceed 16KB.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "name": "large-person-group-name",
    "userData": "User-provided data attached to the large person group."
}</doc>
          </representation>
        </request>
        <response status="200">
          <doc>A successful call returns an empty response body.</doc>
        </response>
        <response status="400">
          <doc>Error code and message returned in JSON:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Error Code&lt;/th&gt;
            &lt;th&gt;Error Message Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;BadArgument&lt;/td&gt;
            &lt;td&gt;'name' is too long.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;BadArgument&lt;/td&gt;
            &lt;td&gt;'userData' is too long.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;BadArgument&lt;/td&gt;
            &lt;td&gt;Both 'name' and 'userData' are empty.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;BadArgument&lt;/td&gt;
            &lt;td&gt;Request body is invalid.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "BadArgument",
        "message": "'name' is too long."
    }
}</doc>
          </representation>
        </response>
        <response status="401">
          <doc>Error code and message returned in JSON:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Error Code&lt;/th&gt;
            &lt;th&gt;Error Message Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;Unspecified&lt;/td&gt;
            &lt;td&gt;Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "Unspecified",
        "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
    }
}</doc>
          </representation>
        </response>
        <response status="403">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 403,
        "message": "Out of call volume quota. Quota will be replenished in 2 days."
    }
}</doc>
          </representation>
        </response>
        <response status="404">
          <doc>Error code and message returned in JSON:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Error Code&lt;/th&gt;
            &lt;th&gt;Error Message Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;LargePersonGroupNotFound&lt;/td&gt;
            &lt;td&gt;Large person group is not found.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;LargePersonGroupNotFound&lt;/td&gt;
            &lt;td&gt;Large person group ID is invalid.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "LargePersonGroupNotFound",
        "message": "Large person group is not found."
    }
}</doc>
          </representation>
        </response>
        <response status="415">
          <doc>Unsupported media type error. Only "application/json" is valid for this API.</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "BadArgument",
        "message": "Invalid Media Type."
    }
}</doc>
          </representation>
        </response>
        <response status="429">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 429,
        "message": "Rate limit is exceeded. Try again in 26 seconds."
    }
}</doc>
          </representation>
        </response>
      </method>
    </resource>
    <resource path="/largepersongroups/{largePersonGroupId}">
      <doc title="LargePersonGroup - Delete">Delete an existing large person group with specified personGroupId. Persisted data in this large person group will be deleted.
&lt;h4&gt;Http Method&lt;/h4&gt;
DELETE</doc>
      <param name="largePersonGroupId" style="template" type="xs:string" required="true">
        <doc>largePersonGroupId of the large person group to be deleted.</doc>
      </param>
      <method name="DELETE">
        <request />
        <response status="200">
          <doc>A successful call returns an empty response body.</doc>
        </response>
        <response status="401">
          <doc>Error code and message returned in JSON:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Error Code&lt;/th&gt;
            &lt;th&gt;Error Message Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;Unspecified&lt;/td&gt;
            &lt;td&gt;Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "Unspecified",
        "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
    }
}</doc>
          </representation>
        </response>
        <response status="403">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 403,
        "message": "Out of call volume quota. Quota will be replenished in 2 days."
    }
}</doc>
          </representation>
        </response>
        <response status="404">
          <doc>Error code and message returned in JSON:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Error Code&lt;/th&gt;
            &lt;th&gt;Error Message Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;LargePersonGroupNotFound&lt;/td&gt;
            &lt;td&gt;Large person group is not found.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;LargePersonGroupNotFound&lt;/td&gt;
            &lt;td&gt;Large person group ID is invalid.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "LargePersonGroupNotFound",
        "message": "Large person group is not found."
    }
}</doc>
          </representation>
        </response>
        <response status="429">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 429,
        "message": "Rate limit is exceeded. Try again in 26 seconds."
    }
}</doc>
          </representation>
        </response>
      </method>
    </resource>
    <resource path="/largepersongroups/{largePersonGroupId}/persons">
      <doc title="LargePersonGroup Person - Create">Create a new person in a specified large person group. To add face to this person, please call
&lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/599adf2a3a7b9412a4d53f42"&gt;LargePersonGroup PersonFace - Add&lt;/a&gt;.
&lt;br/&gt;
&lt;ul&gt;
    &lt;li&gt;Free-tier subscription quota:
        &lt;ul&gt;
            &lt;li&gt;1,000 persons in all large person groups.&lt;/li&gt;
        &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;S0-tier subscription quota:
        &lt;ul&gt;
            &lt;li&gt;1,000,000 persons per large person group.&lt;/li&gt;
            &lt;li&gt;1,000,000 large person groups.&lt;/li&gt;
            &lt;li&gt;1,000,000,000 persons in all large person groups.&lt;/li&gt;
        &lt;/ul&gt;
    &lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Http Method&lt;/h4&gt;
POST</doc>
      <param name="largePersonGroupId" style="template" type="xs:string" required="true">
        <doc>largePersonGroupId of the target large person group.</doc>
      </param>
      <method name="POST">
        <request>
          <doc>JSON fields in request body:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Fields&lt;/th&gt;
            &lt;th&gt;Type&lt;/th&gt;
            &lt;th&gt;Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;name&lt;/td&gt;
            &lt;th&gt;String&lt;/th&gt;
            &lt;td&gt;Name of the created person, maximum length is 128.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;userData (optional)&lt;/td&gt;
            &lt;th&gt;String&lt;/th&gt;
            &lt;td&gt;Optional user defined data for the person. Length should not exceed 16KB.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "name": "person-name",
    "userData": "User-provided data attached to the person."
}</doc>
          </representation>
        </request>
        <response status="200">
          <doc>A successful call returns a new personId created.
&lt;br/&gt;
&lt;br/&gt; JSON fields in response body:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Fields&lt;/th&gt;
            &lt;th&gt;Type&lt;/th&gt;
            &lt;th&gt;Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;personId&lt;/td&gt;
            &lt;th&gt;String&lt;/th&gt;
            &lt;td&gt;personID of the new created person.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "personId": "25985303-c537-4467-b41d-bdb45cd95ca1"
}</doc>
          </representation>
        </response>
        <response status="400">
          <doc>Error code and message returned in JSON:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Error Code&lt;/th&gt;
            &lt;th&gt;Error Message Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;BadArgument&lt;/td&gt;
            &lt;td&gt;Large person group ID is invalid.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;BadArgument&lt;/td&gt;
            &lt;td&gt;'name' is empty.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;BadArgument&lt;/td&gt;
            &lt;td&gt;'name' is too long.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;BadArgument&lt;/td&gt;
            &lt;td&gt;'userData' is too long.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;BadArgument&lt;/td&gt;
            &lt;td&gt;JSON parsing error.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "BadArgument",
        "message": "'name' is too long."
    }
}</doc>
          </representation>
        </response>
        <response status="401">
          <doc>Error code and message returned in JSON:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Error Code&lt;/th&gt;
            &lt;th&gt;Error Message Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;Unspecified&lt;/td&gt;
            &lt;td&gt;Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "Unspecified",
        "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
    }
}</doc>
          </representation>
        </response>
        <response status="403">
          <doc>Person number reached maximum limit.
&lt;br /&gt;
Error code and message returned in JSON:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Error Code&lt;/th&gt;
            &lt;th&gt;Error Message Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;QuotaExceeded&lt;/td&gt;
            &lt;td&gt;Person number reached large person group level limit.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;QuotaExceeded&lt;/td&gt;
            &lt;td&gt;Person number reached subscription level limit.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "QuotaExceeded",
        "message": "Person number reached subscription level limit."
    }
}</doc>
          </representation>
        </response>
        <response status="404">
          <doc>Error code and message returned in JSON:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Error Code&lt;/th&gt;
            &lt;th&gt;Error Message Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;LargePersonGroupNotFound&lt;/td&gt;
            &lt;td&gt;Large person group is not found.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;LargePersonGroupNotFound&lt;/td&gt;
            &lt;td&gt;Large person group ID is invalid.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "LargePersonGroupNotFound",
        "message": "Large person group is not found."
    }
}</doc>
          </representation>
        </response>
        <response status="415">
          <doc>Unsupported media type error. Only "application/json" is valid for this API.</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "BadArgument",
        "message": "Invalid Media Type."
    }
}</doc>
          </representation>
        </response>
        <response status="429">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 429,
        "message": "Rate limit is exceeded. Try again in 26 seconds."
    }
}</doc>
          </representation>
        </response>
      </method>
    </resource>
    <resource path="/largepersongroups/{largePersonGroupId}/persons/{personId}">
      <doc title="LargePersonGroup Person - Get">Retrieve a person's name and userData, and the persisted faceIds representing the registered person face image.
&lt;h4&gt;Http Method&lt;/h4&gt;
GET</doc>
      <param name="largePersonGroupId" style="template" type="xs:string" required="true">
        <doc>largePersonGroupId of the target large person group.</doc>
      </param>
      <param name="personId" style="template" type="xs:string" required="true">
        <doc>personId of the target person.</doc>
      </param>
      <method name="GET">
        <request />
        <response status="200">
          <doc>A successful call returns the person's information.
&lt;br/&gt;
&lt;br/&gt; JSON fields in response body:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Fields&lt;/th&gt;
            &lt;th&gt;Type&lt;/th&gt;
            &lt;th&gt;Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;personId&lt;/td&gt;
            &lt;th&gt;String&lt;/th&gt;
            &lt;td&gt;personId of the retrieved person.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;persistedFaceIds&lt;/td&gt;
            &lt;th&gt;Array&lt;/th&gt;
            &lt;td&gt;persistedFaceIds of registered faces in the person.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;name&lt;/td&gt;
            &lt;th&gt;String&lt;/th&gt;
            &lt;td&gt;Person's display name.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;userData&lt;/td&gt;
            &lt;th&gt;String&lt;/th&gt;
            &lt;td&gt;User-provided data attached to the person.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "personId": "25985303-c537-4467-b41d-bdb45cd95ca1",
    "persistedFaceIds": [
        "015839fb-fbd9-4f79-ace9-7675fc2f1dd9",
        "fce92aed-d578-4d2e-8114-068f8af4492e",
        "b64d5e15-8257-4af2-b20a-5a750f8940e7"
    ],
    "name": "person-name",
    "userData": "User-provided data attached to the person."
}</doc>
          </representation>
        </response>
        <response status="401">
          <doc>Error code and message returned in JSON:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Error Code&lt;/th&gt;
            &lt;th&gt;Error Message Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;Unspecified&lt;/td&gt;
            &lt;td&gt;Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "Unspecified",
        "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
    }
}</doc>
          </representation>
        </response>
        <response status="403">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 403,
        "message": "Out of call volume quota. Quota will be replenished in 2 days."
    }
}</doc>
          </representation>
        </response>
        <response status="404">
          <doc>Error code and message returned in JSON:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Error Code&lt;/th&gt;
            &lt;th&gt;Error Message Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;PersonNotFound&lt;/td&gt;
            &lt;td&gt;Person is not found.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;PersonNotFound&lt;/td&gt;
            &lt;td&gt;Person ID is invalid.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;LargePersonGroupNotFound&lt;/td&gt;
            &lt;td&gt;Large person group is not found.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;LargePersonGroupNotFound&lt;/td&gt;
            &lt;td&gt;Large person group ID is invalid.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "PersonNotFound",
        "message": "Person is not found."
    }
}</doc>
          </representation>
        </response>
        <response status="429">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 429,
        "message": "Rate limit is exceeded. Try again in 26 seconds."
    }
}</doc>
          </representation>
        </response>
      </method>
    </resource>
    <resource path="/largepersongroups/{largePersonGroupId}/persons">
      <doc title="LargePersonGroup Person - List">List all persons’ information in the specified large person group, including personId, name, userData and persistedFaceIds
of registered person faces.
&lt;ul&gt;
    &lt;li&gt;Persons are stored in alphabetical order of personId created in
        &lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/599adcba3a7b9412a4d53f40"&gt;LargePersonGroup Person - Create&lt;/a&gt;.&lt;/li&gt;
    &lt;li&gt;"start" parameter (string, optional) is a personId value that returned entries have larger ids by string comparison.
        "start" set to empty to indicate return from the first item.&lt;/li&gt;
    &lt;li&gt;"top" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can be returned
        in one call. To fetch more, you can specify "start" with the last returned entry’s personId of the current call.&lt;/li&gt;
&lt;/ul&gt;
For example, total 5 persons with their personId: "personId1", ..., "personId5".
&lt;br /&gt; "start=&amp;top=" will return all 5 persons.
&lt;br /&gt; "start=&amp;top=2" will return "personId1", "personId2".
&lt;br /&gt; "start=personId2&amp;top=3" will return "personId3", "personId4", "personId5".
&lt;h4&gt;Http Method&lt;/h4&gt;
GET</doc>
      <param name="largePersonGroupId" style="template" type="xs:string" required="true">
        <doc>largePersonGroupId of the target large person group.</doc>
      </param>
      <method name="GET">
        <request>
          <param name="start" style="query" type="xs:string">
            <doc>List persons from the least personId greater than the "start". It contains no more than 64 characters. Default is empty.</doc>
          </param>
          <param name="top" style="query" type="xs:integer" default="1000">
            <doc>The number of persons to list, ranging in [1, 1000]. Default is 1000.</doc>
            <option value="1000" />
          </param>
        </request>
        <response status="200">
          <doc>A successful call returns an array of person information that belong to the large person group.
&lt;br/&gt;
&lt;br/&gt; JSON fields in response body:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Fields&lt;/th&gt;
            &lt;th&gt;Type&lt;/th&gt;
            &lt;th&gt;Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;personId&lt;/td&gt;
            &lt;th&gt;String&lt;/th&gt;
            &lt;td&gt;personId of the person in the large person group.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;name&lt;/td&gt;
            &lt;th&gt;String&lt;/th&gt;
            &lt;td&gt;Person's display name.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;userData&lt;/td&gt;
            &lt;th&gt;String&lt;/th&gt;
            &lt;td&gt;User-provided data attached to the person.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;persistedFaceIds&lt;/td&gt;
            &lt;th&gt;Array&lt;/th&gt;
            &lt;td&gt;persistedFaceId array of registered faces of the person.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>[
    {
        "personId": "25985303-c537-4467-b41d-bdb45cd95ca1",
        "name": "person-name1",
        "userData": "User-provided data attached to the person.",
        "persistedFaceIds": [
          "015839fb-fbd9-4f79-ace9-7675fc2f1dd9",
          "fce92aed-d578-4d2e-8114-068f8af4492e",
          "b64d5e15-8257-4af2-b20a-5a750f8940e7"
        ]
    },
    {
        "personId": "2ae4935b-9659-44c3-977f-61fac20d0538",
        "name": "person-name2",
        "userData": "User-provided data attached to the person.",
            "persistedFaceIds": [
            "30ea1073-cc9e-4652-b1e3-d08fb7b95315",
            "fbd2a038-dbff-452c-8e79-2ee81b1aa84e"
        ]
    }
]</doc>
          </representation>
        </response>
        <response status="401">
          <doc>Error code and message returned in JSON:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Error Code&lt;/th&gt;
            &lt;th&gt;Error Message Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;Unspecified&lt;/td&gt;
            &lt;td&gt;Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "Unspecified",
        "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
    }
}</doc>
          </representation>
        </response>
        <response status="403">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 403,
        "message": "Out of call volume quota. Quota will be replenished in 2 days."
    }
}</doc>
          </representation>
        </response>
        <response status="404">
          <doc>Error code and message returned in JSON:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Error Code&lt;/th&gt;
            &lt;th&gt;Error Message Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;LargePersonGroupNotFound&lt;/td&gt;
            &lt;td&gt;Large person group is not found.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;LargePersonGroupNotFound&lt;/td&gt;
            &lt;td&gt;Large person group ID is invalid.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "LargePersonGroupNotFound",
        "message": "Large person group is not found."
    }
}</doc>
          </representation>
        </response>
        <response status="429">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 429,
        "message": "Rate limit is exceeded. Try again in 26 seconds."
    }
}</doc>
          </representation>
        </response>
      </method>
    </resource>
    <resource path="/largepersongroups/{largePersonGroupId}/persons/{personId}">
      <doc title="LargePersonGroup Person - Update">Update name or userData of a person.
&lt;h4&gt;Http Method&lt;/h4&gt;
PATCH</doc>
      <param name="largePersonGroupId" style="template" type="xs:string" required="true">
        <doc>largePersonGroupId of the target large person group.</doc>
      </param>
      <param name="personId" style="template" type="xs:string" required="true">
        <doc>personId of the target person.</doc>
      </param>
      <method name="PATCH">
        <request>
          <doc>JSON fields in request body:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Fields&lt;/th&gt;
            &lt;th&gt;Type&lt;/th&gt;
            &lt;th&gt;Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;name&lt;/td&gt;
            &lt;th&gt;String&lt;/th&gt;
            &lt;td&gt;Name of the created person, maximum length is 128.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;userData (optional)&lt;/td&gt;
            &lt;th&gt;String&lt;/th&gt;
            &lt;td&gt;Optional user defined data for the person. Length should not exceed 16KB.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "name": "person-name",
    "userData": "User-provided data attached to the person."
}</doc>
          </representation>
        </request>
        <response status="200">
          <doc>A successful call returns an empty response body.</doc>
        </response>
        <response status="400">
          <doc>Error code and message returned in JSON:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Error Code&lt;/th&gt;
            &lt;th&gt;Error Message Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;BadArgument&lt;/td&gt;
            &lt;td&gt;Large person group ID is invalid.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;BadArgument&lt;/td&gt;
            &lt;td&gt;'name' is empty.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;BadArgument&lt;/td&gt;
            &lt;td&gt;'name' is too long.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;BadArgument&lt;/td&gt;
            &lt;td&gt;'userData' is too long.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;BadArgument&lt;/td&gt;
            &lt;td&gt;JSON parsing error.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "BadArgument",
        "message": "'name' is too long."
    }
}</doc>
          </representation>
        </response>
        <response status="401">
          <doc>Error code and message returned in JSON:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Error Code&lt;/th&gt;
            &lt;th&gt;Error Message Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;Unspecified&lt;/td&gt;
            &lt;td&gt;Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "Unspecified",
        "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
    }
}</doc>
          </representation>
        </response>
        <response status="403">
          <doc>Person number reached maximum limit.
&lt;br /&gt;
Error code and message returned in JSON:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Error Code&lt;/th&gt;
            &lt;th&gt;Error Message Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;QuotaExceeded&lt;/td&gt;
            &lt;td&gt;Person number reached large person group level limit.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;QuotaExceeded&lt;/td&gt;
            &lt;td&gt;Person number reached subscription level limit.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "QuotaExceeded",
        "message": "Person number reached subscription level limit."
    }
}</doc>
          </representation>
        </response>
        <response status="404">
          <doc>Error code and message returned in JSON:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Error Code&lt;/th&gt;
            &lt;th&gt;Error Message Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;PersonNotFound&lt;/td&gt;
            &lt;td&gt;Person is not found.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;PersonNotFound&lt;/td&gt;
            &lt;td&gt;Person ID is invalid.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;LargePersonGroupNotFound&lt;/td&gt;
            &lt;td&gt;Large person group is not found.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;LargePersonGroupNotFound&lt;/td&gt;
            &lt;td&gt;Large person group ID is invalid.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "PersonNotFound",
        "message": "Person is not found."
    }
}</doc>
          </representation>
        </response>
        <response status="415">
          <doc>Unsupported media type error. Only "application/json" is valid for this API.</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "BadArgument",
        "message": "Invalid Media Type."
    }
}</doc>
          </representation>
        </response>
        <response status="429">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 429,
        "message": "Rate limit is exceeded. Try again in 26 seconds."
    }
}</doc>
          </representation>
        </response>
      </method>
    </resource>
    <resource path="/largepersongroups/{largePersonGroupId}/persons/{personId}">
      <doc title="LargePersonGroup Person - Delete">Delete an existing person from a large person group. All stored person data, and face images in the person entry will be deleted.
&lt;h4&gt;Http Method&lt;/h4&gt;
DELETE</doc>
      <param name="largePersonGroupId" style="template" type="xs:string" required="true">
        <doc>largePersonGroupId of the target large person group.</doc>
      </param>
      <param name="personId" style="template" type="xs:string" required="true">
        <doc>personId of the target person.</doc>
      </param>
      <method name="DELETE">
        <request />
        <response status="200">
          <doc>A successful call returns an empty response body.</doc>
        </response>
        <response status="401">
          <doc>Error code and message returned in JSON:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Error Code&lt;/th&gt;
            &lt;th&gt;Error Message Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;Unspecified&lt;/td&gt;
            &lt;td&gt;Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "Unspecified",
        "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
    }
}</doc>
          </representation>
        </response>
        <response status="403">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 403,
        "message": "Out of call volume quota. Quota will be replenished in 2 days."
    }
}</doc>
          </representation>
        </response>
        <response status="404">
          <doc>Error code and message returned in JSON:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Error Code&lt;/th&gt;
            &lt;th&gt;Error Message Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;PersonNotFound&lt;/td&gt;
            &lt;td&gt;Person is not found.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;PersonNotFound&lt;/td&gt;
            &lt;td&gt;Person ID is invalid.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;LargePersonGroupNotFound&lt;/td&gt;
            &lt;td&gt;Large person group is not found.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;LargePersonGroupNotFound&lt;/td&gt;
            &lt;td&gt;Large person group ID is invalid.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "LargePersonGroupNotFound",
        "message": "Large person group is not found."
    }
}</doc>
          </representation>
        </response>
        <response status="429">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 429,
        "message": "Rate limit is exceeded. Try again in 26 seconds."
    }
}</doc>
          </representation>
        </response>
      </method>
    </resource>
    <resource path="/largepersongroups/{largePersonGroupId}/persons/{personId}/persistedfaces">
      <doc title="LargePersonGroup Person - Add Face">Add a face image to a person into a large person group for face identification or verification. To deal with the image of
multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a persistedFaceId representing
the added face. The face image and related info will be stored on server until
&lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/599ae2966ac60f11b48b5aa3"&gt;LargePersonGroup PersonFace - Delete&lt;/a&gt;,
&lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/599ade5c6ac60f11b48b5aa2"&gt;LargePersonGroup Person - Delete&lt;/a&gt; or
&lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/599adc216ac60f11b48b5a9f"&gt;LargePersonGroup - Delete&lt;/a&gt; is called.
&lt;br /&gt; Note persistedFaceId is different from faceId generated by
&lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236"&gt;Face - Detect&lt;/a&gt;.
&lt;ul&gt;
    &lt;li&gt;Higher face image quality means better recognition precision. Please consider high-quality faces: frontal, clear, and
        face size is 200x200 pixels (100 pixels between eyes) or bigger.&lt;/li&gt;
    &lt;li&gt;Each person entry can hold up to 248 faces.&lt;/li&gt;
    &lt;li&gt;JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 4MB.&lt;/li&gt;
    &lt;li&gt;"targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the provided
        "targetFace" rectangle is not returned from
        &lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236"&gt;Face - Detect&lt;/a&gt;, there’s no guarantee to detect and add the face successfully.&lt;/li&gt;
    &lt;li&gt;Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause failures.&lt;/li&gt;
    &lt;li&gt;Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting faces to/from different persons
        are processed in parallel.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Http Method&lt;/h4&gt;
POST</doc>
      <param name="largePersonGroupId" style="template" type="xs:string" required="true">
        <doc>largePersonGroupId of the target large person group.</doc>
      </param>
      <param name="personId" style="template" type="xs:string" required="true">
        <doc>personId of the target person.</doc>
      </param>
      <method name="POST">
        <request>
          <doc>&lt;br/&gt;
&lt;br/&gt; JSON fields in request body:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Fields&lt;/th&gt;
            &lt;th&gt;Type&lt;/th&gt;
            &lt;th&gt;Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;url&lt;/td&gt;
            &lt;th&gt;String&lt;/th&gt;
            &lt;td&gt;Face image URL. Valid image size is from 1KB to 4MB. Only one face is allowed per image.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;</doc>
          <param name="userData" style="query" type="xs:string">
            <doc>User-specified data about the target face to add for any purpose. The maximum length is 1KB.</doc>
          </param>
          <param name="targetFace" style="query" type="xs:string">
            <doc>A face rectangle to specify the target face to be added to a person, in the format of "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If there is more than one face in the image, targetFace is required to specify which face to add. No targetFace means there is only one face detected in the entire image.</doc>
          </param>
          <representation mediaType="application/json">
            <doc>{
    "url": "http://example.com/1.jpg"
}</doc>
          </representation>
          <representation mediaType="application/octet-stream">
            <doc>[binary data]</doc>
          </representation>
        </request>
        <response status="200">
          <representation mediaType="application/json">
            <doc>{
    "persistedFaceId": "43897a75-8d6f-42cf-885e-74832febb055"
}</doc>
          </representation>
        </response>
        <response status="400">
          <doc>Error code and message returned in JSON:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Error Code&lt;/th&gt;
            &lt;th&gt;Error Message Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;BadArgument&lt;/td&gt;
            &lt;td&gt;JSON parsing error.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;BadArgument&lt;/td&gt;
            &lt;td&gt;'userData' is too long.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;BadArgument&lt;/td&gt;
            &lt;td&gt;Argument targetFace out of range.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;BadArgument&lt;/td&gt;
            &lt;td&gt;Invalid argument targetFace.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;InvalidURL&lt;/td&gt;
            &lt;td&gt;Invalid image URL.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;InvalidURL&lt;/td&gt;
            &lt;td&gt;Invalid image URL or error downloading from target server.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;InvalidImage&lt;/td&gt;
            &lt;td&gt;There is more than 1 face in the image.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;InvalidImage&lt;/td&gt;
            &lt;td&gt;No face detected in the image.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;InvalidImage&lt;/td&gt;
            &lt;td&gt;Decoding error, image format unsupported.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;InvalidImageSize&lt;/td&gt;
            &lt;td&gt;Image size is too small.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;InvalidImageSize&lt;/td&gt;
            &lt;td&gt;Image size is too big.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "BadArgument",
        "message": "JSON parsing error."
    }
}</doc>
          </representation>
        </response>
        <response status="401">
          <doc>Error code and message returned in JSON:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Error Code&lt;/th&gt;
            &lt;th&gt;Error Message Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;Unspecified&lt;/td&gt;
            &lt;td&gt;Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "Unspecified",
        "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
    }
}</doc>
          </representation>
        </response>
        <response status="403">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "QuotaExceeded",
        "message": "Persisted face number reached limit."
    }
}</doc>
          </representation>
        </response>
        <response status="404">
          <doc>Error code and message returned in JSON:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Error Code&lt;/th&gt;
            &lt;th&gt;Error Message Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;PersonNotFound&lt;/td&gt;
            &lt;td&gt;Person is not found.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;PersonNotFound&lt;/td&gt;
            &lt;td&gt;Person ID is invalid.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;LargePersonGroupNotFound&lt;/td&gt;
            &lt;td&gt;Large person group is not found.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;LargePersonGroupNotFound&lt;/td&gt;
            &lt;td&gt;Large person group ID is invalid.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "LargePersonGroupNotFound",
        "message": "Large person group is not found."
    }
}</doc>
          </representation>
        </response>
        <response status="408">
          <doc>Operation exceeds maximum execution time.</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "OperationTimeOut",
        "message": "Request Timeout."
    }
}</doc>
          </representation>
        </response>
        <response status="409">
          <doc>Error code and message returned in JSON:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Error Code&lt;/th&gt;
            &lt;th&gt;Error Message Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;ConcurrentOperationConflict&lt;/td&gt;
            &lt;td&gt;Concurrent operation conflict on requested resource.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "ConcurrentOperationConflict",
        "message": "Concurrent operation conflict on requested resource."
    }
}</doc>
          </representation>
        </response>
        <response status="415">
          <doc>Unsupported media type error. Content-Type is not in the allowed types:
&lt;br/&gt;
&lt;ol&gt;
    &lt;li&gt;For an image URL, Content-Type should be application/json&lt;/li&gt;
    &lt;li&gt;For a local image, Content-Type should be application/octet-stream&lt;/li&gt;
&lt;/ol&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "BadArgument",
        "message": "Invalid Media Type."
    }
}</doc>
          </representation>
        </response>
        <response status="429">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 429,
        "message": "Rate limit is exceeded. Try again in 26 seconds."
    }
}</doc>
          </representation>
        </response>
      </method>
    </resource>
    <resource path="/largepersongroups/{largePersonGroupId}/persons/{personId}/persistedfaces/{persistedFaceId}">
      <doc title="LargePersonGroup Person - Get Face">Retrieve person face information. The persisted person face is specified by its largePersonGroupId, personId and persistedFaceId.
&lt;h4&gt;Http Method&lt;/h4&gt;
GET</doc>
      <param name="largePersonGroupId" style="template" type="xs:string" required="true">
        <doc>largePersonGroupId of the target large person group.</doc>
      </param>
      <param name="personId" style="template" type="xs:string" required="true">
        <doc>personId of the target person.</doc>
      </param>
      <param name="persistedFaceId" style="template" type="xs:string" required="true">
        <doc>persistedFaceId of the target persisted face.</doc>
      </param>
      <method name="GET">
        <request />
        <response status="200">
          <doc>A successful call returns target persisted face's information (persistedFaceId and userData).
&lt;br/&gt;
&lt;br/&gt; JSON fields in response body:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Fields&lt;/th&gt;
            &lt;th&gt;Type&lt;/th&gt;
            &lt;th&gt;Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;persistedFaceId&lt;/td&gt;
            &lt;th&gt;String&lt;/th&gt;
            &lt;td&gt;The persistedFaceId of the target face.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;userData&lt;/td&gt;
            &lt;th&gt;String&lt;/th&gt;
            &lt;td&gt;User-provided data attached to the face.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "persistedFaceId": "015839fb-fbd9-4f79-ace9-7675fc2f1dd9",
    "userData": "User-provided data attached to the person face."
}</doc>
          </representation>
        </response>
        <response status="401">
          <doc>Error code and message returned in JSON:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Error Code&lt;/th&gt;
            &lt;th&gt;Error Message Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;Unspecified&lt;/td&gt;
            &lt;td&gt;Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "Unspecified",
        "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
    }
}</doc>
          </representation>
        </response>
        <response status="403">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 403,
        "message": "Out of call volume quota. Quota will be replenished in 2 days."
    }
}</doc>
          </representation>
        </response>
        <response status="404">
          <doc>Error code and message returned in JSON:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Error Code&lt;/th&gt;
            &lt;th&gt;Error Message Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;PersistedFaceNotFound&lt;/td&gt;
            &lt;td&gt;Persisted face is not found.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;PersistedFaceNotFound&lt;/td&gt;
            &lt;td&gt;Persisted face ID is invalid.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;PersonNotFound&lt;/td&gt;
            &lt;td&gt;Person is not found.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;PersonNotFound&lt;/td&gt;
            &lt;td&gt;Person ID is invalid.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;LargePersonGroupNotFound&lt;/td&gt;
            &lt;td&gt;Large person group is not found.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;LargePersonGroupNotFound&lt;/td&gt;
            &lt;td&gt;Large person group ID is invalid.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "PersistedFaceNotFound",
        "message": "Persisted face is not found."
    }
}</doc>
          </representation>
        </response>
        <response status="429">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 429,
        "message": "Rate limit is exceeded. Try again in 26 seconds."
    }
}</doc>
          </representation>
        </response>
      </method>
    </resource>
    <resource path="/largepersongroups/{largePersonGroupId}/persons/{personId}/persistedfaces/{persistedFaceId}">
      <doc title="LargePersonGroup Person - Update Face">Update a person persisted face's userData field.
&lt;h4&gt;Http Method&lt;/h4&gt;
PATCH
</doc>
      <param name="largePersonGroupId" style="template" type="xs:string" required="true">
        <doc>largePersonGroupId of the target large person group.</doc>
      </param>
      <param name="personId" style="template" type="xs:string" required="true">
        <doc>personId of the target person.</doc>
      </param>
      <param name="persistedFaceId" style="template" type="xs:string" required="true">
        <doc>persistedFaceId of the target persisted face.</doc>
      </param>
      <method name="PATCH">
        <request>
          <doc>JSON fields in request body:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Fields&lt;/th&gt;
            &lt;th&gt;Type&lt;/th&gt;
            &lt;th&gt;Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;userData&lt;/td&gt;
            &lt;th&gt;String&lt;/th&gt;
            &lt;td&gt;Attach userData to person's persisted face. The size limit is 1KB.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "userData": "User-provided data attached to the person face."
}</doc>
          </representation>
        </request>
        <response status="200">
          <doc>A successful call returns an empty response body.</doc>
        </response>
        <response status="400">
          <doc>Error code and message returned in JSON:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Error Code&lt;/th&gt;
            &lt;th&gt;Error Message Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;BadArgument&lt;/td&gt;
            &lt;td&gt;'userData' is too long.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;BadArgument&lt;/td&gt;
            &lt;td&gt;Request body is invalid.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "BadArgument",
        "message": "'userData' is too long."
    }
}</doc>
          </representation>
        </response>
        <response status="401">
          <doc>Error code and message returned in JSON:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Error Code&lt;/th&gt;
            &lt;th&gt;Error Message Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;Unspecified&lt;/td&gt;
            &lt;td&gt;Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "Unspecified",
        "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
    }
}</doc>
          </representation>
        </response>
        <response status="403">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 403,
        "message": "Out of call volume quota. Quota will be replenished in 2 days."
    }
}</doc>
          </representation>
        </response>
        <response status="404">
          <doc>Error code and message returned in JSON:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Error Code&lt;/th&gt;
            &lt;th&gt;Error Message Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;PersistedFaceNotFound&lt;/td&gt;
            &lt;td&gt;Persisted face is not found.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;PersistedFaceNotFound&lt;/td&gt;
            &lt;td&gt;Persisted face ID is invalid.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;PersonNotFound&lt;/td&gt;
            &lt;td&gt;Person is not found.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;PersonNotFound&lt;/td&gt;
            &lt;td&gt;Person ID is invalid.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;LargePersonGroupNotFound&lt;/td&gt;
            &lt;td&gt;Large person group is not found.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;LargePersonGroupNotFound&lt;/td&gt;
            &lt;td&gt;Large person group ID is invalid.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "PersistedFaceNotFound",
        "message": "Persisted face is not found."
    }
}</doc>
          </representation>
        </response>
        <response status="415">
          <doc>Unsupported media type error. Only "application/json" is valid for this API.</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "BadArgument",
        "message": "Invalid Media Type."
    }
}</doc>
          </representation>
        </response>
        <response status="429">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 429,
        "message": "Rate limit is exceeded. Try again in 26 seconds."
    }
}</doc>
          </representation>
        </response>
      </method>
    </resource>
    <resource path="/largepersongroups/{largePersonGroupId}/persons/{personId}/persistedfaces/{persistedFaceId}">
      <doc title="LargePersonGroup Person - Delete Face">Delete a face from a person in a large person group. Face data and image related to this face entry will be also deleted.
&lt;br /&gt; Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting faces to/from different persons are processed
in parallel.
&lt;br /&gt;
&lt;h4&gt;Http Method&lt;/h4&gt;
DELETE</doc>
      <param name="largePersonGroupId" style="template" type="xs:string" required="true">
        <doc>largePersonGroupId of the target large person group.</doc>
      </param>
      <param name="personId" style="template" type="xs:string" required="true">
        <doc>personId of the target person.</doc>
      </param>
      <param name="persistedFaceId" style="template" type="xs:string" required="true">
        <doc>persistedFaceId of the target persisted face.</doc>
      </param>
      <method name="DELETE">
        <request />
        <response status="200">
          <doc>A successful call returns an empty response body.</doc>
        </response>
        <response status="401">
          <doc>Error code and message returned in JSON:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Error Code&lt;/th&gt;
            &lt;th&gt;Error Message Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;Unspecified&lt;/td&gt;
            &lt;td&gt;Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "Unspecified",
        "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
    }
}</doc>
          </representation>
        </response>
        <response status="403">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 403,
        "message": "Out of call volume quota. Quota will be replenished in 2 days."
    }
}</doc>
          </representation>
        </response>
        <response status="404">
          <doc>Error code and message returned in JSON:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Error Code&lt;/th&gt;
            &lt;th&gt;Error Message Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;PersistedFaceNotFound&lt;/td&gt;
            &lt;td&gt;Persisted face is not found.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;PersistedFaceNotFound&lt;/td&gt;
            &lt;td&gt;Persisted face ID is invalid.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;PersonNotFound&lt;/td&gt;
            &lt;td&gt;Person is not found.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;PersonNotFound&lt;/td&gt;
            &lt;td&gt;Person ID is invalid.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;LargePersonGroupNotFound&lt;/td&gt;
            &lt;td&gt;Large person group is not found.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;LargePersonGroupNotFound&lt;/td&gt;
            &lt;td&gt;Large person group ID is invalid.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "PersistedFaceNotFound",
        "message": "Persisted face is not found."
    }
}</doc>
          </representation>
        </response>
        <response status="409">
          <doc>Error code and message returned in JSON:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Error Code&lt;/th&gt;
            &lt;th&gt;Error Message Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;ConcurrentOperationConflict&lt;/td&gt;
            &lt;td&gt;Concurrent operation conflict on requested resource.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "ConcurrentOperationConflict",
        "message": "Concurrent operation conflict on requested resource."
    }
}</doc>
          </representation>
        </response>
        <response status="429">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 429,
        "message": "Rate limit is exceeded. Try again in 26 seconds."
    }
}</doc>
          </representation>
        </response>
      </method>
    </resource>
    <resource path="/largepersongroups/{largePersonGroupId}/train">
      <doc title="LargePersonGroup - Train">Submit a large person group training task. Training is a crucial step that only a trained large person group can be used
by
&lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239"&gt;Face - Identify&lt;/a&gt;.
&lt;br /&gt;
&lt;br /&gt; The training task is an asynchronous task. Training time depends on the number of person entries, and their faces in a large
person group. It could be in several seconds, or up to half a hour for 1,000,000 persons. To check training completion, please
use
&lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/599ae32c6ac60f11b48b5aa5"&gt;LargePersonGroup - Get Training Status&lt;/a&gt;.
&lt;h4&gt;Http Method&lt;/h4&gt;
POST</doc>
      <param name="largePersonGroupId" style="template" type="xs:string" required="true">
        <doc>Target large person group to be trained.</doc>
      </param>
      <method name="POST">
        <request />
        <response status="202">
          <doc>A successful call returns an empty JSON body.</doc>
        </response>
        <response status="401">
          <doc>Error code and message returned in JSON:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Error Code&lt;/th&gt;&lt;th&gt;Error Message Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;Unspecified&lt;/td&gt;&lt;td&gt;Invalid subscription Key or user/plan is blocked.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "Unspecified",
        "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
    }
}</doc>
          </representation>
        </response>
        <response status="403">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 403,
        "message": "Out of call volume quota. Quota will be replenished in 2 days."
    }
}</doc>
          </representation>
        </response>
        <response status="404">
          <doc>Error code and message returned in JSON:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Error Code&lt;/th&gt;&lt;th&gt;Error Message Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;LargePersonGroupNotFound&lt;/td&gt;&lt;td&gt;Large person group ID is invalid. Valid format should be a string composed by numbers, English letters in lower case, '-', '_', and no longer than 64 characters.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;LargePersonGroupNotFound&lt;/td&gt;&lt;td&gt;Large person group is not found.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "LargePersonGroupNotFound",
        "message": "Large Person group is not found."
    }
}</doc>
          </representation>
        </response>
        <response status="409">
          <doc>Error code and message returned in JSON:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Error Code&lt;/th&gt;&lt;th&gt;Error Message Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;LargePersonGroupTrainingNotFinished&lt;/td&gt;&lt;td&gt;Large person group is under training.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;ConcurrentOperationConflict&lt;/td&gt;&lt;td&gt;Concurrent operation conflict on requested resource.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "PersonGroupTrainingNotFinished",
        "message": "Person group is under training."
    }
}</doc>
          </representation>
        </response>
        <response status="429">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 429,
        "message": "Rate limit is exceeded. Try again in 26 seconds."
    }
}</doc>
          </representation>
        </response>
      </method>
    </resource>
    <resource path="/largepersongroups/{largePersonGroupId}/training">
      <doc title="LargePersonGroup - Get Training Status">To check large person group training status completed or still ongoing. LargePersonGroup Training is an asynchronous operation
triggered by
&lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/599ae2d16ac60f11b48b5aa4"&gt;LargePersonGroup - Train&lt;/a&gt; API.
&lt;br /&gt; Training time depends on the number of person entries, and their faces in a large person group. It could be in seconds,
or up to half an hour for 1,000,000 persons.
&lt;h4&gt;Http Method&lt;/h4&gt;
GET</doc>
      <param name="largePersonGroupId" style="template" type="xs:string" required="true">
        <doc>LargePersonGroupId of target person group.</doc>
      </param>
      <method name="GET">
        <request />
        <response status="200">
          <doc>A successful call returns the large person group's training status.
&lt;br /&gt;
&lt;br /&gt; JSON fields in response body:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Fields&lt;/th&gt;
            &lt;th&gt;Type&lt;/th&gt;
            &lt;th&gt;Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;status&lt;/td&gt;
            &lt;th&gt;String&lt;/th&gt;
            &lt;td&gt;Training status: notstarted, running, succeeded, failed. If the training process is waiting to perform, the status
                is notstarted. If the training is ongoing, the status is running. Status succeed means this large person
                group is ready for
                &lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239"&gt;Face - Identify&lt;/a&gt;. Status failed is often caused by no person or no persisted face exist in the large person
                group. &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;createdDateTime&lt;/td&gt;
            &lt;th&gt;String&lt;/th&gt;
            &lt;td&gt;A combined UTC date and time string that describes large person group created time, delimited by a space. E.g.
                12/21/2017 12:55:39.
            &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;lastActionDateTime&lt;/td&gt;
            &lt;th&gt;String&lt;/th&gt;
            &lt;td&gt;A combined UTC date and time string that describes large person group last modify time, delimited by a space.
                E.g. 12/21/2017 12:55:39.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;lastSuccessfulTrainingDateTime&lt;/td&gt;
            &lt;th&gt;String&lt;/th&gt;
            &lt;td&gt;A combined UTC date and time string that describes large person group last successful training time, delimited
                by a space. E.g. 12/21/2017 12:55:39.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;message&lt;/td&gt;
            &lt;th&gt;String&lt;/th&gt;
            &lt;td&gt;Show failure message when training failed (omitted when training succeed).&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "status": "succeeded",
    "createdDateTime": "12/21/2017 12:57:27",
    "lastActionDateTime": "12/21/2017 12:57:30",
    "lastSuccessfulTrainingDateTime": "12/21/2017 12:57:30",
    "message": null
}</doc>
          </representation>
        </response>
        <response status="401">
          <doc>Error code and message returned in JSON:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Error Code&lt;/th&gt;&lt;th&gt;Error Message Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;Unspecified&lt;/td&gt;&lt;td&gt;Invalid subscription Key or user/plan is blocked.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "Unspecified",
        "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
    }
}</doc>
          </representation>
        </response>
        <response status="403">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 403,
        "message": "Out of call volume quota. Quota will be replenished in 2 days."
    }
}</doc>
          </representation>
        </response>
        <response status="404">
          <doc>Error code and message returned in JSON:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Error Code&lt;/th&gt;&lt;th&gt;Error Message Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;LargePersonGroupNotFound&lt;/td&gt;&lt;td&gt; Large person group ID is invalid.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;LargePersonGroupNotFound&lt;/td&gt;&lt;td&gt;Large person group is not found.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;LargePersonGroupNotTrained&lt;/td&gt;&lt;td&gt;Large person group has not been trained. This error appears on getting training status of a group which never been trained.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "LargePersonGroupNotFound",
        "message": "Large person group is not found."
    }
}</doc>
          </representation>
        </response>
        <response status="409">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": ConcurrentOperationConflict,
        "message": "There is a conflict operation on requested resource, please try later."
    }
}</doc>
          </representation>
        </response>
        <response status="429">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 429,
        "message": "Rate limit is exceeded. Try again in 26 seconds."
    }
}</doc>
          </representation>
        </response>
      </method>
    </resource>
    <resource path="/largefacelists/{largeFaceListId}">
      <doc title="LargeFaceList - Create">Create an empty large face list with user-specified largeFaceListId, name and an optional userData.
&lt;br /&gt; Large face list is a list of faces, up to 1,000,000 faces, and used by
&lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237"&gt;Face - Find Similar&lt;/a&gt;.
&lt;br /&gt; After creation, user should use
&lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/5a158c10d2de3616c086f2d3"&gt;LargeFaceList Face - Add&lt;/a&gt; to import the faces and
&lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/5a158422d2de3616c086f2d1"&gt;LargeFaceList - Train&lt;/a&gt; to make it ready for
&lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237"&gt;Face - Find Similar&lt;/a&gt;. Faces are stored on server until
&lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/5a1580d5d2de3616c086f2cd"&gt;LargeFaceList - Delete&lt;/a&gt; is called.
&lt;br /&gt; Find Similar is used for scenario like finding celebrity-like faces, similar face filtering, or as a light way face identification.
But if the actual use is to identify person, please use
&lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395244"&gt;PersonGroup&lt;/a&gt; /
&lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/599acdee6ac60f11b48b5a9d"&gt;LargePersonGroup&lt;/a&gt; and
&lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239"&gt;Face - Identify&lt;/a&gt;.
&lt;br /&gt;
&lt;ul&gt;
    &lt;li&gt;Free-tier subscription quota: 64 large face lists.&lt;/li&gt;
    &lt;li&gt;S0-tier subscription quota: 1,000,000 large face lists.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Http Method&lt;/h4&gt;
PUT</doc>
      <param name="largeFaceListId" style="template" type="xs:string" required="true">
        <doc>Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.</doc>
      </param>
      <method name="PUT">
        <request>
          <doc>JSON fields in request body:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Fields&lt;/th&gt;
            &lt;th&gt;Type&lt;/th&gt;
            &lt;th&gt;Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;name&lt;/td&gt;
            &lt;th&gt;String&lt;/th&gt;
            &lt;td&gt;Name of the created large face list, maximum length is 128.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;userData (optional)&lt;/td&gt;
            &lt;th&gt;String&lt;/th&gt;
            &lt;td&gt;Optional user defined data for the large face list. Length should not exceed 16KB.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "name": "large-face-list-name",
    "userData": "User-provided data attached to the large face list."
}</doc>
          </representation>
        </request>
        <response status="200">
          <doc>A successful call returns an empty response body.</doc>
        </response>
        <response status="400">
          <doc>Error code and message returned in JSON:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Error Code&lt;/th&gt;
            &lt;th&gt;Error Message Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;BadArgument&lt;/td&gt;
            &lt;td&gt;Large face list ID is invalid.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;BadArgument&lt;/td&gt;
            &lt;td&gt;'name' is empty.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;BadArgument&lt;/td&gt;
            &lt;td&gt;'name' is too long.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;BadArgument&lt;/td&gt;
            &lt;td&gt;'userData' is too long.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;BadArgument&lt;/td&gt;
            &lt;td&gt;JSON parsing error.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "BadArgument",
        "message": "'name' is too long."
    }
}</doc>
          </representation>
        </response>
        <response status="401">
          <doc>Error code and message returned in JSON:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Error Code&lt;/th&gt;
            &lt;th&gt;Error Message Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;Unspecified&lt;/td&gt;
            &lt;td&gt;Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "Unspecified",
        "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
    }
}</doc>
          </representation>
        </response>
        <response status="403">
          <doc>Large face list number reached maximum limit.</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "QuotaExceeded",
        "message": "Large Face List number reached limit."
    }
}</doc>
          </representation>
        </response>
        <response status="409">
          <doc>Error code and message returned in JSON:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Error Code&lt;/th&gt;
            &lt;th&gt;Error Message Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;LargeFaceListExists&lt;/td&gt;
            &lt;td&gt;Large face list already exists.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "LargeFaceListExists",
        "message": "Large face list already exists."
    }
}</doc>
          </representation>
        </response>
        <response status="415">
          <doc>Unsupported media type error. Only "application/json" is valid for this API.</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "BadArgument",
        "message": "Invalid Media Type."
    }
}</doc>
          </representation>
        </response>
        <response status="429">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 429,
        "message": "Rate limit is exceeded. Try again in 26 seconds."
    }
}</doc>
          </representation>
        </response>
      </method>
    </resource>
    <resource path="/largefacelists/{largeFaceListId}">
      <doc title="LargeFaceList - Delete">Delete a specified large face list. The related face images in the large face list will be deleted, too.
&lt;h4&gt;Http Method&lt;/h4&gt;
DELETE</doc>
      <param name="largeFaceListId" style="template" type="xs:string" required="true">
        <doc>Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.</doc>
      </param>
      <method name="DELETE">
        <request />
        <response status="200">
          <doc>A successful call returns an empty response body.</doc>
        </response>
        <response status="401">
          <doc>Error code and message returned in JSON:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Error Code&lt;/th&gt;
            &lt;th&gt;Error Message Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;Unspecified&lt;/td&gt;
            &lt;td&gt;Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "Unspecified",
        "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
    }
}</doc>
          </representation>
        </response>
        <response status="403">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 403,
        "message": "Out of call volume quota. Quota will be replenished in 2 days."
    }
}</doc>
          </representation>
        </response>
        <response status="404">
          <doc>Error code and message returned in JSON:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Error Code&lt;/th&gt;
            &lt;th&gt;Error Message Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;LargeFaceListNotFound&lt;/td&gt;
            &lt;td&gt;Large face list is not found.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;LargeFaceListNotFound&lt;/td&gt;
            &lt;td&gt;Large face list ID is invalid.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "LargeFaceListNotFound",
        "message": "Large face list is not found."
    }
}</doc>
          </representation>
        </response>
        <response status="429">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 429,
        "message": "Rate limit is exceeded. Try again in 26 seconds."
    }
}</doc>
          </representation>
        </response>
      </method>
    </resource>
    <resource path="/largefacelists/{largeFaceListId}">
      <doc title="LargeFaceList - Get">Retrieve a large face list’s largeFaceListId, name, userData.
&lt;h4&gt;Http Method&lt;/h4&gt;
GET</doc>
      <param name="largeFaceListId" style="template" type="xs:string" required="true">
        <doc>largeFaceListId of the target large face list.</doc>
      </param>
      <method name="GET">
        <request />
        <response status="200">
          <doc>A successful call returns the large face list's information.
&lt;br/&gt;
&lt;br/&gt;
JSON fields in response body:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Fields&lt;/th&gt;
            &lt;th&gt;Type&lt;/th&gt;
            &lt;th&gt;Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;largeFaceListId&lt;/td&gt;
            &lt;th&gt;String&lt;/th&gt;
            &lt;td&gt;largeFaceListId of the target large face list.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;name&lt;/td&gt;
            &lt;th&gt;String&lt;/th&gt;
            &lt;td&gt;Large face list's display name.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;userData&lt;/td&gt;
            &lt;th&gt;String&lt;/th&gt;
            &lt;td&gt;User-provided data attached to this large face list.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "largeFaceListId": "f92f6f1b-3258-4444-8fa2-c2df505cc7ac",
    "name": "large-face-list-name",
    "userData": "User-provided data attached to the large face list."
}</doc>
          </representation>
        </response>
        <response status="401">
          <doc>Error code and message returned in JSON:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Error Code&lt;/th&gt;
            &lt;th&gt;Error Message Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;Unspecified&lt;/td&gt;
            &lt;td&gt;Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "Unspecified",
        "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
    }
}</doc>
          </representation>
        </response>
        <response status="403">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 403,
        "message": "Out of call volume quota. Quota will be replenished in 2 days."
    }
}</doc>
          </representation>
        </response>
        <response status="404">
          <doc>Error code and message returned in JSON:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Error Code&lt;/th&gt;
            &lt;th&gt;Error Message Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;LargeFaceListNotFound&lt;/td&gt;
            &lt;td&gt;Large face list is not found.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;LargeFaceListNotFound&lt;/td&gt;
            &lt;td&gt;Large face list ID is invalid.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "LargeFaceListNotFound",
        "message": "Large face list is not found."
    }
}</doc>
          </representation>
        </response>
        <response status="429">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 429,
        "message": "Rate limit is exceeded. Try again in 26 seconds."
    }
}</doc>
          </representation>
        </response>
      </method>
    </resource>
    <resource path="/largefacelists/{largeFaceListId}/training">
      <doc title="LargeFaceList - Get Training Status">To check the large face list training status completed or still ongoing. LargeFaceList Training is an asynchronous operation
triggered by
&lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/5a158422d2de3616c086f2d1"&gt;LargeFaceList - Train&lt;/a&gt; API.
&lt;br /&gt; Training time depends on the number of face entries in a large face list. It could be in seconds, or up to half an hour
for 1,000,000 faces.
&lt;h4&gt;Http Method&lt;/h4&gt;
GET</doc>
      <param name="largeFaceListId" style="template" type="xs:string" required="true">
        <doc>largeFaceListId of the target large face list.</doc>
      </param>
      <method name="GET">
        <request />
        <response status="200">
          <doc>A successful call returns the large face list's training status.
&lt;br /&gt;
&lt;br /&gt; JSON fields in response body:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Fields&lt;/th&gt;
            &lt;th&gt;Type&lt;/th&gt;
            &lt;th&gt;Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;status&lt;/td&gt;
            &lt;th&gt;String&lt;/th&gt;
            &lt;td&gt;Training status: notstarted, running, succeeded, failed. If the training process is waiting to perform, the status
                is notstarted. If the training is ongoing, the status is running. Status succeed means this large face list
                is ready for
                &lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237"&gt;Face - Find Similar&lt;/a&gt;. Status failed is often caused by no person or no persisted face exist in the large
                face list. &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;createdDateTime&lt;/td&gt;
            &lt;th&gt;String&lt;/th&gt;
            &lt;td&gt;A combined UTC date and time string that describes large face list created time, delimited by a space. E.g. 12/21/2017
                12:55:39.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;lastActionDateTime&lt;/td&gt;
            &lt;th&gt;String&lt;/th&gt;
            &lt;td&gt;A combined UTC date and time string that describes large face list last modify time, delimited by a space. E.g.
                12/21/2017 12:55:39.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;lastSuccessfulTrainingDateTime&lt;/td&gt;
            &lt;th&gt;String&lt;/th&gt;
            &lt;td&gt;A combined UTC date and time string that describes large face list last successful training time, delimited by
                a space. E.g. 12/21/2017 12:55:39.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;message&lt;/td&gt;
            &lt;th&gt;String&lt;/th&gt;
            &lt;td&gt;Show failure message when training failed (omitted when training succeed).&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "status": "succeeded",
    "createdDateTime": "12/21/2017 12:55:39",
    "lastActionDateTime": "12/21/2017 12:55:41",
    "lastSuccessfulTrainingDateTime": "12/21/2017 12:55:41",
    "message": null
}</doc>
          </representation>
        </response>
        <response status="401">
          <doc>Error code and message returned in JSON:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Error Code&lt;/th&gt;
            &lt;th&gt;Error Message Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;Unspecified&lt;/td&gt;
            &lt;td&gt;Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "Unspecified",
        "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
    }
}</doc>
          </representation>
        </response>
        <response status="403">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 403,
        "message": "Out of call volume quota. Quota will be replenished in 2 days."
    }
}</doc>
          </representation>
        </response>
        <response status="404">
          <doc>Error code and message returned in JSON:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Error Code&lt;/th&gt;
            &lt;th&gt;Error Message Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;LargeFaceListNotFound&lt;/td&gt;
            &lt;td&gt;Large face list is not found.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;LargeFaceListNotFound&lt;/td&gt;
            &lt;td&gt;Large face list ID is invalid.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;LargeFaceListNotTrained&lt;/td&gt;
            &lt;td&gt;Large face list not trained. This error appears on getting training status of a large face list which never been trained.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "LargeFaceListNotFound",
        "message": "Large face list is not found."
    }
}</doc>
          </representation>
        </response>
        <response status="429">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 429,
        "message": "Rate limit is exceeded. Try again in 26 seconds."
    }
}</doc>
          </representation>
        </response>
      </method>
    </resource>
    <resource path="/largefacelists">
      <doc title="LargeFaceList - List">List large face lists’ information of largeFaceListId, name and userData.
&lt;br /&gt; To get face information inside largeFaceList use
&lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/5a158cf2d2de3616c086f2d5"&gt;LargeFaceList Face - Get&lt;/a&gt;.
&lt;ul&gt;
    &lt;li&gt;Large face lists are stored in alphabetical order of largeFaceListId.&lt;/li&gt;
    &lt;li&gt;"start" parameter (string, optional) is a user-provided largeFaceListId value that returned entries have larger ids
        by string comparison. "start" set to empty to indicate return from the first item.&lt;/li&gt;
    &lt;li&gt;"top" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can be returned
        in one call. To fetch more, you can specify "start" with the last retuned entry’s Id of the current call.&lt;/li&gt;
&lt;/ul&gt;
For example, total 5 large person lists: "list1", ..., "list5".
&lt;br /&gt; "start=&amp;top=" will return all 5 lists.
&lt;br /&gt; "start=&amp;top=2" will return "list1", "list2".
&lt;br /&gt; "start=list2&amp;top=3" will return "list3", "list4", "list5".
&lt;h4&gt;Http Method&lt;/h4&gt;
GET</doc>
      <method name="GET">
        <request>
          <param name="start" style="query" type="xs:string">
            <doc>List large face lists from the least largeFaceListId greater than the "start". It contains no more than 64 characters. Default is empty.</doc>
          </param>
          <param name="top" style="query" type="xs:string" default="1000">
            <doc>The number of large face lists to list, ranging in [1, 1000]. Default is 1000.</doc>
            <option value="1000" />
          </param>
        </request>
        <response status="200">
          <doc>A successful call returns an array of large face lists and their information (largeFaceListId, name and userData).
&lt;br /&gt;
&lt;br /&gt;
JSON fields in response body:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Fields&lt;/th&gt;
            &lt;th&gt;Type&lt;/th&gt;
            &lt;th&gt;Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;largeFaceListId&lt;/td&gt;
            &lt;th&gt;String&lt;/th&gt;
            &lt;td&gt;largeFaceListId of the existing large face lists, created in &lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/5a157b68d2de3616c086f2cc"&gt;LargeFaceList - Create&lt;/a&gt;.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;name&lt;/td&gt;
            &lt;th&gt;String&lt;/th&gt;
            &lt;td&gt;Large face list's display name.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;userData&lt;/td&gt;
            &lt;th&gt;String&lt;/th&gt;
            &lt;td&gt;User-provided data attached to this large face list.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>[
    {
        "largeFaceListId": "f92f6f1b-3258-4444-8fa2-c2df505cc7ac",
        "name": "large-face-list-name1",
        "userData": "User-provided data attached to the large face list."
    },
    {
        "largeFaceListId": "c76f7f13-0ed3-4d00-8a3e-2ad3d78f6c37",
        "name": "large-face-list-name2",
        "userData": "User-provided data attached to the large face list."
    }
]</doc>
          </representation>
        </response>
        <response status="400">
          <doc>Error code and message returned in JSON:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Error Code&lt;/th&gt;
            &lt;th&gt;Error Message Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;BadArgument&lt;/td&gt;
            &lt;td&gt;'start' is too long.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;BadArgument&lt;/td&gt;
            &lt;td&gt;'top' is invalid.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "BadArgument",
        "message": "'top' is invalid."
    }
}</doc>
          </representation>
        </response>
        <response status="401">
          <doc>Error code and message returned in JSON:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Error Code&lt;/th&gt;
            &lt;th&gt;Error Message Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;Unspecified&lt;/td&gt;
            &lt;td&gt;Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "Unspecified",
        "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
    }
}</doc>
          </representation>
        </response>
        <response status="403">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "QuotaExceeded",
        "message": "Large Face List number reached limit."
    }
}</doc>
          </representation>
        </response>
        <response status="429">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 429,
        "message": "Rate limit is exceeded. Try again in 26 seconds."
    }
}</doc>
          </representation>
        </response>
      </method>
    </resource>
    <resource path="/largefacelists/{largeFaceListId}/train">
      <doc title="LargeFaceList - Train">Submit a large face list training task. Training is a crucial step that only a trained large face list can be used by
&lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237"&gt;Face - Find Similar&lt;/a&gt;.
&lt;br /&gt;
&lt;br /&gt; The training task is an asynchronous task. Training time depends on the number of face entries in a large face list. It could
be in seconds, or up to half an hour for 1,000,000 faces. To check training completion, please use
&lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/5a1582f8d2de3616c086f2cf"&gt;LargeFaceList - Get Training Status&lt;/a&gt;.
&lt;h4&gt;Http Method&lt;/h4&gt;
POST</doc>
      <param name="largeFaceListId" style="template" type="xs:string" required="true">
        <doc>largeFaceListId of the target large face list to be trained.</doc>
      </param>
      <method name="POST">
        <request />
        <response status="202">
          <doc>A successful call returns an empty response body.</doc>
        </response>
        <response status="401">
          <doc>Error code and message returned in JSON:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Error Code&lt;/th&gt;
            &lt;th&gt;Error Message Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;Unspecified&lt;/td&gt;
            &lt;td&gt;Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "Unspecified",
        "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
    }
}</doc>
          </representation>
        </response>
        <response status="403">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 403,
        "message": "Out of call volume quota. Quota will be replenished in 2 days."
    }
}</doc>
          </representation>
        </response>
        <response status="404">
          <doc>Error code and message returned in JSON:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Error Code&lt;/th&gt;
            &lt;th&gt;Error Message Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;LargeFaceListNotFound&lt;/td&gt;
            &lt;td&gt;Large face list is not found.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;LargeFaceListNotFound&lt;/td&gt;
            &lt;td&gt;Large face list ID is invalid.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "LargeFaceListNotFound",
        "message": "Large face list is not found."
    }
}</doc>
          </representation>
        </response>
        <response status="409">
          <doc>Error code and message returned in JSON:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Error Code&lt;/th&gt;
            &lt;th&gt;Error Message Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;LargeFaceListTrainingNotFinished&lt;/td&gt;
            &lt;td&gt;Large Face List is under training.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "LargeFaceListTrainingNotFinished",
        "message": "Large face list is under training."
    }
}</doc>
          </representation>
        </response>
        <response status="429">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 429,
        "message": "Rate limit is exceeded. Try again in 26 seconds."
    }
}</doc>
          </representation>
        </response>
      </method>
    </resource>
    <resource path="/largefacelists/{largeFaceListId}">
      <doc title="LargeFaceList - Update">Update information of a large face list, including name and userData.
&lt;h4&gt;Http Method&lt;/h4&gt;
PATCH</doc>
      <param name="largeFaceListId" style="template" type="xs:string" required="true">
        <doc>Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.</doc>
      </param>
      <method name="PATCH">
        <request>
          <doc>JSON fields in request body:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Fields&lt;/th&gt;
            &lt;th&gt;Type&lt;/th&gt;
            &lt;th&gt;Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;name&lt;/td&gt;
            &lt;th&gt;String&lt;/th&gt;
            &lt;td&gt;Name of the large face list, maximum length is 128&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;userData (optional)&lt;/td&gt;
            &lt;th&gt;String&lt;/th&gt;
            &lt;td&gt;Optional user defined data for the large face list. Length should not exceed 16KB&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "name": "large-face-list-name",
    "userData": "User-provided data attached to the large face list."
}</doc>
          </representation>
        </request>
        <response status="200">
          <doc>A successful call returns an empty response body.</doc>
        </response>
        <response status="400">
          <doc>Error code and message returned in JSON:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Error Code&lt;/th&gt;
            &lt;th&gt;Error Message Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;BadArgument&lt;/td&gt;
            &lt;td&gt;'name' is too long.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;BadArgument&lt;/td&gt;
            &lt;td&gt;'userData' is too long.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;BadArgument&lt;/td&gt;
            &lt;td&gt;Both 'name' and 'userData' are empty.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;BadArgument&lt;/td&gt;
            &lt;td&gt;Request body is invalid.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "BadArgument",
        "message": "'name' is too long."
    }
}</doc>
          </representation>
        </response>
        <response status="401">
          <doc>Error code and message returned in JSON:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Error Code&lt;/th&gt;
            &lt;th&gt;Error Message Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;Unspecified&lt;/td&gt;
            &lt;td&gt;Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "Unspecified",
        "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
    }
}</doc>
          </representation>
        </response>
        <response status="403">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 403,
        "message": "Out of call volume quota. Quota will be replenished in 2 days."
    }
}</doc>
          </representation>
        </response>
        <response status="404">
          <doc>Error code and message returned in JSON:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Error Code&lt;/th&gt;
            &lt;th&gt;Error Message Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;LargeFaceListNotFound&lt;/td&gt;
            &lt;td&gt;Large face list is not found.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;LargeFaceListNotFound&lt;/td&gt;
            &lt;td&gt;Large face list ID is invalid.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "LargeFaceListNotFound",
        "message": "Large face list is not found."
    }
}</doc>
          </representation>
        </response>
        <response status="415">
          <doc>Unsupported media type error. Only "application/json" is valid for this API.</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "BadArgument",
        "message": "Invalid Media Type."
    }
}</doc>
          </representation>
        </response>
        <response status="429">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 429,
        "message": "Rate limit is exceeded. Try again in 26 seconds."
    }
}</doc>
          </representation>
        </response>
      </method>
    </resource>
    <resource path="/largefacelists/{largeFaceListId}/persistedfaces">
      <doc title="LargeFaceList - Add Face">Add a face to a specified large face list, up to 1,000,000 faces.
&lt;br /&gt; To deal with the image of multiple faces, input face can be specified as an image with a targetFace rectangle. It returns
a persistedFaceId representing the added face. The face image and related info will be stored on server until
&lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/5a158c8ad2de3616c086f2d4"&gt;LargeFaceList Face - Delete&lt;/a&gt; or
&lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/5a1580d5d2de3616c086f2cd"&gt;LargeFaceList - Delete&lt;/a&gt; is called.
&lt;br /&gt; Note persistedFaceId is different from faceId generated by
&lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236"&gt;Face - Detect&lt;/a&gt;.
&lt;ul&gt;
    &lt;li&gt;JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 4MB.&lt;/li&gt;
    &lt;li&gt;"targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the provided
        "targetFace" rectangle is not returned from
        &lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236"&gt;Face - Detect&lt;/a&gt;, there’s no guarantee to detect and add the face successfully.&lt;/li&gt;
    &lt;li&gt;Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause failures.&lt;/li&gt;
    &lt;li&gt;Adding/deleting faces to/from a same face list are processed sequentially and to/from different face lists are in parallel.&lt;/li&gt;
&lt;/ul&gt;
Quota:
&lt;ul&gt;
    &lt;li&gt;Free-tier subscription quota: 1,000 faces per large face list.&lt;/li&gt;
    &lt;li&gt;S0-tier subscription quota: 1,000,000 faces per large face list.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Http Method&lt;/h4&gt;
POST</doc>
      <param name="largeFaceListId" style="template" type="xs:string" required="true">
        <doc>Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.</doc>
      </param>
      <method name="POST">
        <request>
          <doc>&lt;br/&gt;
&lt;br/&gt; JSON fields in request body:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Fields&lt;/th&gt;
            &lt;th&gt;Type&lt;/th&gt;
            &lt;th&gt;Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;url&lt;/td&gt;
            &lt;th&gt;String&lt;/th&gt;
            &lt;td&gt;Face image URL. Valid image size is from 1KB to 4MB. Only one face is allowed per image.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;</doc>
          <param name="userData" style="query" type="xs:string">
            <doc>User-specified data about the target face to add for any purpose. The maximum length is 1KB.</doc>
          </param>
          <param name="targetFace" style="query" type="xs:string">
            <doc>A face rectangle to specify the target face to be added to a large face list, in the format of "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If there is more than one face in the image, targetFace is required to specify which face to add. No targetFace means there is only one face detected in the entire image.</doc>
          </param>
          <representation mediaType="application/json">
            <doc>{
    "url": "http://example.com/1.jpg"
}</doc>
          </representation>
          <representation mediaType="application/octet-stream">
            <doc>[binary data]</doc>
          </representation>
        </request>
        <response status="200">
          <doc>A successful call returns a new persistedFaceId.
&lt;br/&gt;&lt;br/&gt; JSON fields in response body:
&lt;table class="element table"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Fields&lt;/th&gt;&lt;th&gt;Type&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;persistedFaceId&lt;/td&gt;&lt;th&gt;String&lt;/th&gt;&lt;td&gt;persistedFaceId of the added face, which is persisted and will not expire. Different from faceId which is created in &lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236"&gt;Face - Detect&lt;/a&gt; and will expire in 24 hours after the detection call.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "persistedFaceId": "43897a75-8d6f-42cf-885e-74832febb055"
}</doc>
          </representation>
        </response>
        <response status="400">
          <doc>Error code and message returned in JSON:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Error Code&lt;/th&gt;
            &lt;th&gt;Error Message Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;BadArgument&lt;/td&gt;
            &lt;td&gt;JSON parsing error.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;BadArgument&lt;/td&gt;
            &lt;td&gt;'userData' is too long.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;BadArgument&lt;/td&gt;
            &lt;td&gt;Argument targetFace out of range.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;BadArgument&lt;/td&gt;
            &lt;td&gt;Invalid argument targetFace.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;InvalidURL&lt;/td&gt;
            &lt;td&gt;Invalid image URL.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;InvalidURL&lt;/td&gt;
            &lt;td&gt;Invalid image URL or error downloading from target server. Remote server error returned: "An error occurred while sending the request."&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;InvalidImage&lt;/td&gt;
            &lt;td&gt;There is more than 1 face in the image.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;InvalidImage&lt;/td&gt;
            &lt;td&gt;No face detected in the image.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;InvalidImage&lt;/td&gt;
            &lt;td&gt;Decoding error, image format unsupported.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;InvalidImageSize&lt;/td&gt;
            &lt;td&gt;Image size is too small.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;InvalidImageSize&lt;/td&gt;
            &lt;td&gt;Image size is too big.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "BadArgument",
        "message": "JSON parsing error."
    }
}</doc>
          </representation>
        </response>
        <response status="401">
          <doc>Error code and message returned in JSON:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Error Code&lt;/th&gt;
            &lt;th&gt;Error Message Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;Unspecified&lt;/td&gt;
            &lt;td&gt;Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "Unspecified",
        "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
    }
}</doc>
          </representation>
        </response>
        <response status="403">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "QuotaExceeded",
        "message": "Persisted face number reached limit."
    }
}</doc>
          </representation>
        </response>
        <response status="404">
          <doc>Error code and message returned in JSON:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Error Code&lt;/th&gt;
            &lt;th&gt;Error Message Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;LargeFaceListNotFound&lt;/td&gt;
            &lt;td&gt;Large face list is not found.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;LargeFaceListNotFound&lt;/td&gt;
            &lt;td&gt;Large face list ID is invalid.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "LargeFaceListNotFound",
        "message": "Large face list is not found."
    }
}</doc>
          </representation>
        </response>
        <response status="408">
          <doc>Operation exceeds maximum execution time.</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "OperationTimeOut",
        "message": "Request Timeout."
    }
}</doc>
          </representation>
        </response>
        <response status="415">
          <doc>Unsupported media type error. Content-Type is not in the allowed types:
&lt;br/&gt;
&lt;ol&gt;
    &lt;li&gt;For an image URL, Content-Type should be application/json&lt;/li&gt;
    &lt;li&gt;For a local image, Content-Type should be application/octet-stream&lt;/li&gt;
&lt;/ol&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "BadArgument",
        "message": "Invalid Media Type."
    }
}</doc>
          </representation>
        </response>
        <response status="429">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 429,
        "message": "Rate limit is exceeded. Try again in 26 seconds."
    }
}</doc>
          </representation>
        </response>
      </method>
    </resource>
    <resource path="/largefacelists/{largeFaceListId}/persistedfaces/{persistedFaceId}">
      <doc title="LargeFaceList - Delete Face">Delete a face from a large face list by specified largeFaceListId and persisitedFaceId. The related face image will be deleted, too.
&lt;br /&gt;
Adding/deleting faces to/from a same large face list are processed sequentially and to/from different large face lists are in parallel.
&lt;h4&gt;Http Method&lt;/h4&gt; DELETE
</doc>
      <param name="largeFaceListId" style="template" type="xs:string" required="true">
        <doc>largeFaceListId of an existing large face list. Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.</doc>
      </param>
      <param name="persistedFaceId" style="template" type="xs:string" required="true">
        <doc>persistedFaceId of an existing face. Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.</doc>
      </param>
      <method name="DELETE">
        <request />
        <response status="200">
          <doc>A successful call returns an empty response body.</doc>
        </response>
        <response status="401">
          <doc>Error code and message returned in JSON:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Error Code&lt;/th&gt;
            &lt;th&gt;Error Message Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;Unspecified&lt;/td&gt;
            &lt;td&gt;Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "Unspecified",
        "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
    }
}</doc>
          </representation>
        </response>
        <response status="403">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "QuotaExceeded",
        "message": "Large Face List number reached limit."
    }
}</doc>
          </representation>
        </response>
        <response status="404">
          <doc>Error code and message returned in JSON:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Error Code&lt;/th&gt;
            &lt;th&gt;Error Message Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;LargeFaceListNotFound&lt;/td&gt;
            &lt;td&gt;Large face list ID is invalid.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;LargeFaceListNotFound&lt;/td&gt;
            &lt;td&gt;Large face list is not found.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;PersistedFaceNotFound&lt;/td&gt;
            &lt;td&gt;Persisted face ID is invalid.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;PersistedFaceNotFound&lt;/td&gt;
            &lt;td&gt;Large Face List Face is not found.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "PersistedFaceNotFound",
        "message": "Persisted face ID is invalid."
    }
}</doc>
          </representation>
        </response>
        <response status="429">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 429,
        "message": "Rate limit is exceeded. Try again in 26 seconds."
    }
}</doc>
          </representation>
        </response>
      </method>
    </resource>
    <resource path="/largefacelists/{largeFaceListId}/persistedfaces/{persistedFaceId}">
      <doc title="LargeFaceList - Get Face">Retrieve persisted face in large face list by largeFaceListId and persistedFaceId.
&lt;h4&gt;Http Method&lt;/h4&gt;
GET</doc>
      <param name="largeFaceListId" style="template" type="xs:string" required="true">
        <doc>largeFaceListId of an existing large face list. Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.</doc>
      </param>
      <param name="persistedFaceId" style="template" type="xs:string" required="true">
        <doc>persistedFaceId of an existing face. Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.</doc>
      </param>
      <method name="GET">
        <request />
        <response status="200">
          <doc>A successful call returns target persisted face's information (persistedFaceId and userData).</doc>
          <representation mediaType="application/json">
            <doc>{
    "persistedFaceId": "12167f31-c0f6-4d3b-806c-116b4b4b4e4c",
    "userData": "User-provided data attached to the large face list face."
}</doc>
          </representation>
        </response>
        <response status="401">
          <doc>Error code and message returned in JSON:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Error Code&lt;/th&gt;
            &lt;th&gt;Error Message Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;Unspecified&lt;/td&gt;
            &lt;td&gt;Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "Unspecified",
        "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
    }
}</doc>
          </representation>
        </response>
        <response status="403">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 403,
        "message": "Out of call volume quota. Quota will be replenished in 2 days."
    }
}</doc>
          </representation>
        </response>
        <response status="404">
          <doc>Error code and message returned in JSON:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Error Code&lt;/th&gt;
            &lt;th&gt;Error Message Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;LargeFaceListNotFound&lt;/td&gt;
            &lt;td&gt;Large face list ID is invalid.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;LargeFaceListNotFound&lt;/td&gt;
            &lt;td&gt;Large face list is not found.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;PersistedFaceNotFound&lt;/td&gt;
            &lt;td&gt;Persisted face ID is invalid.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;PersistedFaceNotFound&lt;/td&gt;
            &lt;td&gt;Large Face List Face is not found.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;
</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "PersistedFaceNotFound",
        "message": "Persisted face ID is invalid."
    }
}</doc>
          </representation>
        </response>
        <response status="429">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 429,
        "message": "Rate limit is exceeded. Try again in 26 seconds."
    }
}</doc>
          </representation>
        </response>
      </method>
    </resource>
    <resource path="/largefacelists/{largeFaceListId}/persistedfaces">
      <doc title="LargeFaceList - List Face">List faces' persistedFaceId and userData in a specified large face list.
&lt;ul&gt;
    &lt;li&gt;Faces are stored in alphabetical order of persistedFaceId created in
        &lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/5a158c10d2de3616c086f2d3"&gt;LargeFaceList Face - Add&lt;/a&gt;.&lt;/li&gt;
    &lt;li&gt;"start" parameter (string, optional) is a persistedFaceId value that returned entries have larger ids by string comparison.
        "start" set to empty to indicate return from the first item.&lt;/li&gt;
    &lt;li&gt;"top" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can be returned
        in one call. To fetch more, you can specify "start" with the last returned entry’s persistedFaceId of the current call.&lt;/li&gt;
&lt;/ul&gt;
For example, total 5 persons with their face: "face1", ..., "face5".
&lt;br /&gt; "start=&amp;top=" will return all 5 persons.
&lt;br /&gt; "start=&amp;top=2" will return "face1", "face2".
&lt;br /&gt; "start=face2&amp;top=3" will return "face3", "face4", "face5".
&lt;h4&gt;Http Method&lt;/h4&gt;
GET</doc>
      <param name="largeFaceListId" style="template" type="xs:string" required="true">
        <doc>Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.</doc>
      </param>
      <method name="GET">
        <request>
          <param name="start" style="query" type="xs:string">
            <doc>List large face list faces from the least persistedFaceId greater than the "start". It contains no more than 64 characters. Default is empty.</doc>
          </param>
          <param name="top" style="query" type="xs:string" default="1000">
            <doc>The number of large face list faces to list, ranging in [1, 1000]. Default is 1000.</doc>
            <option value="1000" />
          </param>
        </request>
        <response status="200">
          <doc>A successful call returns an array of persisted faces and their information (persistedFaceId and userData).
&lt;br /&gt;
&lt;br /&gt;
JSON fields in response body:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Fields&lt;/th&gt;
            &lt;th&gt;Type&lt;/th&gt;
            &lt;th&gt;Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;persistedFaceId&lt;/td&gt;
            &lt;th&gt;String&lt;/th&gt;
            &lt;td&gt;persistedFaceId of the existing persisted face, created in &lt;a href="/docs/services/563879b61984550e40cbbe8d/operations/5a158c10d2de3616c086f2d3"&gt;LargeFaceList Face - Add&lt;/a&gt;.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;userData&lt;/td&gt;
            &lt;th&gt;String&lt;/th&gt;
            &lt;td&gt;User-provided data attached to this persisted face.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>[
    {
        "persistedFaceId": "8a887ac2-53fd-4f55-9024-1ec77eecd08e",
        "userData": "User-provided data attached to the large face list face."
    },
    {
        "persistedFaceId": "f92f6f1b-3258-4444-8fa2-c2df505cc7ac",
        "userData": "User-provided data attached to the large face list face."
    }
]</doc>
          </representation>
        </response>
        <response status="400">
          <doc>Error code and message returned in JSON:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Error Code&lt;/th&gt;
            &lt;th&gt;Error Message Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;BadArgument&lt;/td&gt;
            &lt;td&gt;'start' is too long.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;BadArgument&lt;/td&gt;
            &lt;td&gt;'top' is invalid.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "BadArgument",
        "message": "'top' is invalid."
    }
}</doc>
          </representation>
        </response>
        <response status="401">
          <doc>Error code and message returned in JSON:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Error Code&lt;/th&gt;
            &lt;th&gt;Error Message Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;Unspecified&lt;/td&gt;
            &lt;td&gt;Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "Unspecified",
        "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
    }
}</doc>
          </representation>
        </response>
        <response status="403">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "QuotaExceeded",
        "message": "Large Face List number reached limit."
    }
}</doc>
          </representation>
        </response>
        <response status="404">
          <doc>Error code and message returned in JSON:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Error Code&lt;/th&gt;
            &lt;th&gt;Error Message Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;LargeFaceListNotFound&lt;/td&gt;
            &lt;td&gt;Large face list is not found.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;LargeFaceListNotFound&lt;/td&gt;
            &lt;td&gt;Large face list ID is invalid.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "LargeFaceListNotFound",
        "message": "Large face list is not found."
    }
}</doc>
          </representation>
        </response>
        <response status="429">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 429,
        "message": "Rate limit is exceeded. Try again in 26 seconds."
    }
}</doc>
          </representation>
        </response>
      </method>
    </resource>
    <resource path="/largefacelists/{largeFaceListId}/persistedfaces/{persistedFaceId}">
      <doc title="LargeFaceList - Update Face">Update a specified face's userData field in a large face list by its persistedFaceId.
&lt;h4&gt;Http Method&lt;/h4&gt;
PATCH</doc>
      <param name="largeFaceListId" style="template" type="xs:string" required="true">
        <doc>largeFaceListId of an existing large face list. Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.</doc>
      </param>
      <param name="persistedFaceId" style="template" type="xs:string" required="true">
        <doc>persistedFaceId of an existing face. Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.</doc>
      </param>
      <method name="PATCH">
        <request>
          <doc>User-specified data about the target face to add for any purpose. The maximum length is 1KB.</doc>
          <representation mediaType="application/json">
            <doc>{
    "userData": "User-provided data attached to the large face list face."
}</doc>
          </representation>
        </request>
        <response status="200">
          <doc>A successful call returns an empty response body.</doc>
        </response>
        <response status="400">
          <doc>Error code and message returned in JSON:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Error Code&lt;/th&gt;
            &lt;th&gt;Error Message Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;BadArgument&lt;/td&gt;
            &lt;td&gt;'userData' is too long.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;BadArgument&lt;/td&gt;
            &lt;td&gt;Request body is invalid.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "BadArgument",
        "message": "'userData' is too long."
    }
}</doc>
          </representation>
        </response>
        <response status="401">
          <doc>Error code and message returned in JSON:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Error Code&lt;/th&gt;
            &lt;th&gt;Error Message Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;Unspecified&lt;/td&gt;
            &lt;td&gt;Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "Unspecified",
        "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
    }
}</doc>
          </representation>
        </response>
        <response status="403">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 403,
        "message": "Out of call volume quota. Quota will be replenished in 2 days."
    }
}</doc>
          </representation>
        </response>
        <response status="404">
          <doc>Error code and message returned in JSON:
&lt;table class="element table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Error Code&lt;/th&gt;
            &lt;th&gt;Error Message Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;LargeFaceListNotFound&lt;/td&gt;
            &lt;td&gt;Large face list ID is invalid.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;LargeFaceListNotFound&lt;/td&gt;
            &lt;td&gt;Large face list is not found.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;PersistedFaceNotFound&lt;/td&gt;
            &lt;td&gt;Persisted face ID is invalid.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;PersistedFaceNotFound&lt;/td&gt;
            &lt;td&gt;Large Face List Face is not found.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "PersistedFaceNotFound",
        "message": "Persisted face ID is invalid."
    }
}</doc>
          </representation>
        </response>
        <response status="415">
          <doc>Unsupported media type error. Only "application/json" is valid for this API.</doc>
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "code": "BadArgument",
        "message": "Invalid Media Type."
    }
}</doc>
          </representation>
        </response>
        <response status="429">
          <representation mediaType="application/json">
            <doc>{
    "error": {
        "statusCode": 429,
        "message": "Rate limit is exceeded. Try again in 26 seconds."
    }
}</doc>
          </representation>
        </response>
      </method>
    </resource>
  </resources>
</application>